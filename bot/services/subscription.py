"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º.
"""
import logging
import asyncio
import json
from typing import List, Tuple, Dict, Any, Optional, Union
import time # –î–ª—è TTL –∫—ç—à–∞
import datetime

from aiogram import Bot, types
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Chat
from aiogram.utils.markdown import hlink, hbold, hcode

from ..db.database import DatabaseManager
from ..utils.helpers import get_user_mention_html, get_cached_general_info, is_admin
from bot.keyboards.inline import get_subscription_check_keyboard # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)

# --- –ö—ç—à –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö --- #
_chat_info_cache = {}
_CACHE_TTL = 300 # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

# –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
_subscription_cache = {}  # {(user_id, channel_id): {"result": bool, "timestamp": time}}
_SUBSCRIPTION_CACHE_TTL = 86400  # 24 —á–∞—Å–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_chat_link_for_md(chat_id, chat_title=None):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    if not chat_title:
        chat_title = f"–ß–∞—Ç {chat_id}"
    # –£–±–∏—Ä–∞–µ–º -100 –∏–∑ ID —á–∞—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏
    link_id = str(chat_id).replace('-100', '')
    return f"[{chat_title}](https://t.me/c/{link_id})"

def get_user_link_for_md(user_id, user_name=None):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    if not user_name:
        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
    return f"[{user_name}](tg://user?id={user_id})"

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∞
def format_sub_log(message_type: str, user_id: Optional[int] = None, 
                  user_name: Optional[str] = None, 
                  chat_id: Optional[int] = None, 
                  chat_title: Optional[str] = None, 
                  extra_info: Optional[str] = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤–º–µ—Å—Ç–æ ID"""
    user_part = f"{user_name or 'Unknown'} (ID: {user_id})" if user_id else ""
    chat_part = f"{chat_title or f'–ß–∞—Ç {chat_id}'} (ID: {chat_id})" if chat_id else ""
    details = f": {extra_info}" if extra_info else ""
    
    if user_id and chat_id:
        return f"[{message_type}] {user_part} –≤ {chat_part}{details}"
    elif user_id:
        return f"[{message_type}] {user_part}{details}"
    elif chat_id:
        return f"[{message_type}] {chat_part}{details}"
    else:
        return f"[{message_type}]{details}"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def get_cached_chat_info(bot: Bot, chat_id: int, force_refresh: bool = False) -> Optional[Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    current_time = asyncio.get_event_loop().time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏ –µ–≥–æ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (30 –º–∏–Ω—É—Ç)
    if not force_refresh and chat_id in _chat_info_cache:
        cache_entry = _chat_info_cache[chat_id]
        # –ï—Å–ª–∏ –∫—ç—à –Ω–µ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if current_time - cache_entry.get('timestamp', 0) < 1800:  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
            return cache_entry.get('info')
    
    # –ö—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        chat_info_data = await bot.get_chat(chat_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        _chat_info_cache[chat_id] = {'info': chat_info_data, 'timestamp': current_time}
        return chat_info_data
    except Exception as e:
        logger.error(f"[CHAT_INFO] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {chat_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±–Ω—É–ª—è–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        _chat_info_cache[chat_id] = {'info': None, 'timestamp': current_time} 
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
def get_cached_subscription(user_id: int, channel_id: int) -> Tuple[bool, bool]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫—ç—à–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_cached, is_member)
    """
    cache_key = (user_id, channel_id)
    current_time = time.time()
    
    if cache_key in _subscription_cache:
        entry = _subscription_cache[cache_key]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if current_time - entry["timestamp"] < _SUBSCRIPTION_CACHE_TTL:
            # –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
            return True, entry["result"]
    
    # –ö—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
    return False, False

def set_subscription_cache(user_id: int, channel_id: int, is_member: bool):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫—ç—à"""
    cache_key = (user_id, channel_id)
    _subscription_cache[cache_key] = {
        "result": is_member,
        "timestamp": time.time()
    }

def update_subscription_cache(user_id: int, channel_id: int, is_member: bool = True):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    cache_key = (user_id, channel_id)
    _subscription_cache[cache_key] = {
        "result": is_member,
        "timestamp": time.time()
    }
    logger.info(f"[SUB_CACHE_UPDATE] üîµ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}: –ø–æ–¥–ø–∏—Å–∞–Ω={is_member}")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
def clear_expired_subscription_cache():
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    current_time = time.time()
    expired_keys = []
    
    for key, entry in _subscription_cache.items():
        if current_time - entry["timestamp"] > _SUBSCRIPTION_CACHE_TTL:
            expired_keys.append(key)
    
    for key in expired_keys:
        del _subscription_cache[key]
    
    if expired_keys:
        logger.debug(f"[SUB_CACHE] –û—á–∏—â–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫")

# ----------------------------------- #

class SubscriptionService:
    def __init__(self, bot: Bot, db_manager: DatabaseManager):
        self.bot = bot
        self.db = db_manager
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        asyncio.create_task(self._schedule_cache_cleanup())
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ 5 —É—Ç—Ä–∞
        asyncio.create_task(self.schedule_daily_cache_update())

    async def _schedule_cache_cleanup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞"""
        while True:
            # await asyncio.sleep(600)  # –°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 10 –º–∏–Ω—É—Ç
            await asyncio.sleep(6 * 60 * 60)  # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 6 —á–∞—Å–æ–≤
            logger.info("[SUB_CACHE] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (—Å—Ç–∞—Ä—à–µ 24—á).") # –î–æ–±–∞–≤–∏–ª –ª–æ–≥
            clear_expired_subscription_cache()
            
    async def schedule_daily_cache_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ 5 —É—Ç—Ä–∞"""
        while True:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ 5 —É—Ç—Ä–∞
                now = datetime.datetime.now()
                target_time = now.replace(hour=5, minute=0, second=0, microsecond=0)
                if now >= target_time:
                    # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 5 —É—Ç—Ä–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    target_time = target_time + datetime.timedelta(days=1)
                
                seconds_to_wait = (target_time - now).total_seconds()
                logger.info(f"[CACHE_SCHEDULER] üìÜ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ {target_time.strftime('%Y-%m-%d %H:%M:%S')} (—á–µ—Ä–µ–∑ {seconds_to_wait/3600:.1f} —á–∞—Å–æ–≤)")
                await asyncio.sleep(seconds_to_wait)
                
                await self.update_all_subscriptions_cache()
                logger.info(f"[CACHE_SCHEDULER] ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
            except Exception as e:
                logger.error(f"[CACHE_SCHEDULER] ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True)
                await asyncio.sleep(3600)

    async def update_all_subscriptions_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            active_chats = await self.db.get_active_chats_with_subscription_check()
            total_chats = len(active_chats)
            total_users_processed = 0 
            total_api_checks_made = 0
            
            logger.info(f"[CACHE_UPDATE] üîÑ –ù–∞—á–∞—Ç–æ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è {total_chats} —á–∞—Ç–æ–≤")
            
            API_REQUEST_DELAY = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.1 —Å–µ–∫ -> ~10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ –æ—Ç —ç—Ç–æ–π –∑–∞–¥–∞—á–∏

            for chat_idx, chat_id in enumerate(active_chats):
                try:
                    linked_channels = await self.db.get_linked_channels_for_chat(chat_id)
                    if not linked_channels:
                        logger.debug(f"[CACHE_UPDATE] –ß–∞—Ç {chat_id} ({(chat_idx+1)}/{total_chats}) –Ω–µ –∏–º–µ–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    active_users = await self.db.get_active_chat_users(chat_id, days=7) # –ú–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å `days`
                    if not active_users:
                        logger.debug(f"[CACHE_UPDATE] –ß–∞—Ç {chat_id} ({(chat_idx+1)}/{total_chats}) –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                
                    logger.info(f"[CACHE_UPDATE] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–∞—Ç {chat_id} ({(chat_idx+1)}/{total_chats}): {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π √ó {len(linked_channels)} –∫–∞–Ω–∞–ª–æ–≤")
                    
                    for user_idx, user_id in enumerate(active_users):
                        # –Ø–≤–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram
                        if user_id == 777000:
                            logger.info(f"[CACHE_UPDATE] –ü—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram (ID: {user_id}) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                            continue

                        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_id –±–æ—Ç–æ–º, –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
                        try:
                            user_object = await self.bot.get_chat(user_id) # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                            if hasattr(user_object, 'is_bot') and user_object.is_bot:
                                logger.info(f"[CACHE_UPDATE] –ü—Ä–æ–ø—É—Å–∫ –±–æ—Ç–∞ (ID: {user_id}, Name: {user_object.full_name if hasattr(user_object, 'full_name') else 'N/A'}) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                                continue
                        except TelegramAPIError as e_get_user:
                            logger.warning(f"[CACHE_UPDATE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ user_id {user_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞): {e_get_user}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                            continue
                        except Exception as e_generic_get_user:
                            logger.error(f"[CACHE_UPDATE] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ user_id {user_id}: {e_generic_get_user}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.", exc_info=True)
                            continue

                        total_users_processed +=1 
                        for channel_id in linked_channels: # –£–±—Ä–∞–ª channel_idx, –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
                            try:
                                member = await self.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                                is_member = member.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
                            
                                _subscription_cache[(user_id, channel_id)] = {
                                    "result": is_member,
                                    "timestamp": time.time()
                                }
                                total_api_checks_made += 1
                                
                                if total_api_checks_made > 0 and total_api_checks_made % 50 == 0:
                                    logger.info(f"[CACHE_UPDATE] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_api_checks_made} API-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...")
                                
                                await asyncio.sleep(API_REQUEST_DELAY)
                                    
                            except TelegramAPIError as e_api:
                                if "user not found" in str(e_api).lower():
                                    _subscription_cache[(user_id, channel_id)] = {"result": False, "timestamp": time.time()}
                                    logger.info(f"[CACHE_UPDATE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_id} (API: {e_api}), –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ False.")
                                elif "chat not found" in str(e_api).lower() or "bot was kicked from the channel" in str(e_api).lower():
                                    logger.warning(f"[CACHE_UPDATE] –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –∫–∏–∫–Ω—É—Ç (API: {e_api}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á–∞—Ç–æ–º chat_id –≤ –ë–î
                                    break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ –∫–∞–Ω–∞–ª–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                                else:
                                    logger.error(f"[CACHE_UPDATE] –û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è user={user_id} channel={channel_id}: {e_api}")
                                await asyncio.sleep(API_REQUEST_DELAY) 
                            except Exception as e_inner:
                                logger.error(f"[CACHE_UPDATE] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è user={user_id} channel={channel_id}: {e_inner}", exc_info=True)
                                await asyncio.sleep(API_REQUEST_DELAY)
                        
                        # –ï—Å–ª–∏ –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ü–∏–∫–ª –ø–æ –∫–∞–Ω–∞–ª–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                        if 'e_api' in locals() and ("chat not found" in str(e_api).lower() or "bot was kicked from the channel" in str(e_api).lower()): # pyright: ignore [reportUnboundVariable]
                           break

                        if (user_idx + 1) % 20 == 0: # –õ–æ–≥ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
                             logger.info(f"[CACHE_UPDATE] –í —á–∞—Ç–µ {chat_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {(user_idx + 1)}/{len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                             await asyncio.sleep(0.5) # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                except Exception as e_outer_loop:
                    logger.error(f"[CACHE_UPDATE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id} ({(chat_idx+1)}/{total_chats}): {e_outer_loop}", exc_info=True)
                    await asyncio.sleep(1) # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —á–∞—Ç–∞

            logger.info(f"[CACHE_UPDATE] ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤ (–ø–æ–ø—ã—Ç–æ–∫) - {total_chats}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ü–∏–∫–ª–∞—Ö) - {total_users_processed}, API-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–Ω–æ - {total_api_checks_made}.")
            
        except Exception as e:
            logger.error(f"[CACHE_UPDATE] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}", exc_info=True)
            
    async def check_single_channel(self, user_id: int, channel_id: int, user_name: str = None) -> Tuple[int, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –û–î–ò–ù –∫–∞–Ω–∞–ª.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (channel_id, status) –≥–¥–µ status —ç—Ç–æ ChatMemberStatus –∏–ª–∏ None/False –ø—Ä–∏ –æ—à–∏–±–∫–µ.
        –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        user_name_for_log = user_name if user_name else f"User_{user_id}"
        channel_name_for_log = f"Channel_{channel_id}" # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ API (–¥–ª—è –ª–æ–≥–æ–≤)
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π get_cached_chat_info
            channel_info = await get_cached_chat_info(self.bot, channel_id)
            if channel_info and channel_info.title:
                channel_name_for_log = channel_info.title
        except Exception as e_info:
            logger.debug(f"[SUB_CHECK_SINGLE_INFO_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e_info}")


        logger.info(f"[SUB_CHECK_SINGLE_INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id})")

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û –ù–ê –í–†–ï–ú–Ø –û–¢–õ–ê–î–ö–ò)
        # is_cached, cached_result = get_cached_subscription(user_id, channel_id)
        # if is_cached:
        #     logger.info(f"[SUB_CHECK_SINGLE_CACHE] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞: {'–ø–æ–¥–ø–∏—Å–∞–Ω' if cached_result else '–ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω'}")
        #     return channel_id, ChatMemberStatus.MEMBER if cached_result else ChatMemberStatus.LEFT

        # 2. –ó–∞–ø—Ä–æ—Å –∫ Telegram API
        try:
            logger.debug(f"[SUB_CHECK_SINGLE_API_CALL] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –∑–∞–ø—Ä–æ—Å –∫ Telegram API...")
            # –î–æ–±–∞–≤–ª—è–µ–º timeout –∫ –∑–∞–ø—Ä–æ—Å—É API
            member_status = await self.bot.get_chat_member(chat_id=channel_id, user_id=user_id) # request_timeout=10 –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è aiogram –ø–æ–∑–≤–æ–ª—è–µ—Ç
            
            is_member = member_status.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à (–¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à –Ω–∞ —á—Ç–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω, –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–≤–∏–º)
            set_subscription_cache(user_id, channel_id, is_member)
            
            logger.info(f"[SUB_CHECK_SINGLE_API_RESULT] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): —Å—Ç–∞—Ç—É—Å –æ—Ç API: {member_status.status}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ø–æ–¥–ø–∏—Å–∞–Ω' if is_member else '–ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω'}")
            return channel_id, member_status.status

        except TelegramAPIError as e:
            if "user not found" in str(e).lower():
                logger.warning(f"[SUB_CHECK_SINGLE_API_ERROR] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ (API: {e}). –°—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º.")
                set_subscription_cache(user_id, channel_id, False)
                return channel_id, ChatMemberStatus.LEFT
            elif "chat not found" in str(e).lower():
                logger.error(f"[SUB_CHECK_SINGLE_API_ERROR] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): —á–∞—Ç/–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (API: {e}).")
                return channel_id, None 
            elif "bot was kicked from the channel" in str(e).lower() or "bot is not a member of the channel" in str(e).lower():
                logger.error(f"[SUB_CHECK_SINGLE_API_ERROR] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞ (API: {e}).")
                return channel_id, None
            elif isinstance(e, TelegramBadRequest) and "chat unavailable" in str(e).lower(): # TelegramBadRequest - –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
                logger.warning(f"[SUB_CHECK_SINGLE_API_ERROR_UNAVAILABLE] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –∫–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (API: {e}). –°—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑.")
                # –ù–µ –∫—ç—à–∏—Ä—É–µ–º —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ False, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π
                return channel_id, ChatMemberStatus.LEFT 
            else:
                logger.error(f"[SUB_CHECK_SINGLE_API_ERROR_OTHER] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram API: {e}", exc_info=True)
                set_subscription_cache(user_id, channel_id, False) 
                return channel_id, ChatMemberStatus.LEFT
        except Exception as e:
            logger.error(f"[SUB_CHECK_SINGLE_UNEXPECTED_ERROR] {user_name_for_log} –Ω–∞ {channel_name_for_log} (ID: {channel_id}): –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}", exc_info=True)
            return channel_id, None

    async def check_subscription(self, user_id: int, chat_id: int, force_check: bool = False) -> Tuple[bool, List[int]]: # –î–æ–±–∞–≤–ª–µ–Ω force_check
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º.
        force_check: –ï—Å–ª–∏ True, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ check_single_channel –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å (–∫—ç—à —á—Ç–µ–Ω–∏—è –≤ –Ω—ë–º –æ—Ç–∫–ª—é—á–µ–Ω).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (is_fully_subscribed, list_of_unsubscribed_channel_ids)
        """
        user_info = await get_cached_general_info(self.bot, user_id, "user")
        user_name_for_log = user_info.get('full_name', f"User_{user_id}") if user_info else f"User_{user_id}"
        
        chat_info_db = await self.db.get_chat_settings(chat_id)
        chat_title_for_log = chat_info_db.get('chat_title', f"Chat_{chat_id}") if chat_info_db else f"Chat_{chat_id}"

        log_prefix = f"[SUB_CHECK_OVERALL{' FORCE' if force_check else ''}]" # –ò—Å–ø–æ–ª—å–∑—É–µ–º force_check –¥–ª—è –ª–æ–≥–∞
        logger.info(f"{log_prefix} –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_name_for_log} (ID: {user_id}) –≤ {chat_title_for_log} (ID: {chat_id})")

        linked_channel_ids = await self.db.get_linked_channels_for_chat(chat_id)
        if not linked_channel_ids:
            logger.info(f"{log_prefix} {user_name_for_log} –≤ {chat_title_for_log}: –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º.")
            return True, []
                                    
        logger.info(f"{log_prefix} {user_name_for_log} –≤ {chat_title_for_log}: –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {linked_channel_ids}")

        unsubscribed_channel_ids = []
        
        # –ö—ç—à —á—Ç–µ–Ω–∏—è –≤ check_single_channel —Å–µ–π—á–∞—Å –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        # –ü–æ—ç—Ç–æ–º—É –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å API –∑–∞–ø—Ä–æ—Å.
        tasks = [self.check_single_channel(user_id, ch_id, user_name=user_name_for_log) for ch_id in linked_channel_ids]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for i, result_item in enumerate(results):
            current_channel_id = linked_channel_ids[i] 

            if isinstance(result_item, Exception):
                logger.error(f"{log_prefix}_GATHER_ERROR {user_name_for_log} –≤ {chat_title_for_log}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ ID {current_channel_id}: {result_item}")
                unsubscribed_channel_ids.append(current_channel_id)
                continue

            returned_channel_id, status = result_item 
            
            if returned_channel_id != current_channel_id:
                 logger.warning(f"{log_prefix}_GATHER_MISMATCH {user_name_for_log} –≤ {chat_title_for_log}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –∫–∞–Ω–∞–ª–∞. –û–∂–∏–¥–∞–ª—Å—è {current_channel_id}, –ø–æ–ª—É—á–µ–Ω {returned_channel_id}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π.")
            
            target_channel_id_for_log = returned_channel_id
            
            channel_info_for_log = await get_cached_chat_info(self.bot, target_channel_id_for_log)
            channel_title_for_log_item = channel_info_for_log.title if channel_info_for_log and channel_info_for_log.title else f"–ö–∞–Ω–∞–ª ID {target_channel_id_for_log}"

            if status is None: 
                logger.warning(f"{log_prefix}_CHANNEL_ERROR {user_name_for_log} –≤ {chat_title_for_log}: –ù–ï –£–î–ê–õ–û–°–¨ –ü–†–û–í–ï–†–ò–¢–¨ —Å—Ç–∞—Ç—É—Å –¥–ª—è {channel_title_for_log_item} (ID: {target_channel_id_for_log}). –°—á–∏—Ç–∞–µ–º –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º.")
                unsubscribed_channel_ids.append(target_channel_id_for_log)
            elif status not in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}:
                logger.info(f"{log_prefix}_NOT_SUBSCRIBED {user_name_for_log} –≤ {chat_title_for_log}: –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel_title_for_log_item} (ID: {target_channel_id_for_log}). –°—Ç–∞—Ç—É—Å –æ—Ç API: {status}")
                unsubscribed_channel_ids.append(target_channel_id_for_log)
            else:
                logger.info(f"{log_prefix}_SUBSCRIBED {user_name_for_log} –≤ {chat_title_for_log}: –ü–û–î–ü–ò–°–ê–ù –Ω–∞ {channel_title_for_log_item} (ID: {target_channel_id_for_log}). –°—Ç–∞—Ç—É—Å –æ—Ç API: {status}")

        if not unsubscribed_channel_ids:
            logger.info(f"{log_prefix}_RESULT_SUCCESS {user_name_for_log} (ID: {user_id}) –≤ {chat_title_for_log} (ID: {chat_id}): –ü–û–õ–ù–û–°–¢–¨–Æ –ü–û–î–ü–ò–°–ê–ù –Ω–∞ –≤—Å–µ {len(linked_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤.")
            return True, []
        else:
            logger.info(f"{log_prefix}_RESULT_FAIL {user_name_for_log} (ID: {user_id}) –≤ {chat_title_for_log} (ID: {chat_id}): –ù–ï –ü–û–î–ü–ò–°–ê–ù –Ω–∞ {len(unsubscribed_channel_ids)} –∏–∑ {len(linked_channel_ids)} –∫–∞–Ω–∞–ª–æ–≤. ID –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö: {unsubscribed_channel_ids}")
            return False, unsubscribed_channel_ids

    async def handle_subscription_check_callback(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'."""
        await callback_query.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...", cache_time=2) 
        
        user = callback_query.from_user
        if not callback_query.message or not callback_query.message.chat:
            logger.error(f"[SUB_CALLBACK_ERR_NO_CHAT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç –∏–∑ callback_query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        chat_id = callback_query.message.chat.id 
        chat_full_name = callback_query.message.chat.full_name if callback_query.message.chat.full_name else f"–ß–∞—Ç ID {chat_id}"
        message_id_of_button = callback_query.message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π

        user_mention = get_user_mention_html(user)
        logger.info(f"[SUB_CALLBACK_INIT] {user_mention} (ID: {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ {chat_full_name} (ID: {chat_id}) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id_of_button}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞ (force_check=True)
        is_subscribed, unsubscribed_channels = await self.check_subscription(user.id, chat_id, force_check=True)

        if is_subscribed:
            logger.info(f"[SUB_CALLBACK_SUCCESS] {user_mention} (ID: {user.id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ {chat_id}.")
            
            try:
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await self.bot.delete_message(chat_id=chat_id, message_id=message_id_of_button)
                logger.info(f"[SUB_CALLBACK_CLEANUP] –°–æ–æ–±—â–µ–Ω–∏–µ {message_id_of_button} —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è {user_mention} –≤ —á–∞—Ç–µ {chat_id}.")
            except TelegramAPIError as e_del_msg:
                logger.warning(f"[SUB_CALLBACK_CLEANUP_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id_of_button} —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è {user_mention} –≤ —á–∞—Ç–µ {chat_id}: {e_del_msg}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏—Ö–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            group_success_message_text = f"üéâ {user_mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!"
            try:
                sent_group_msg = await self.bot.send_message(
                    chat_id=chat_id, 
                    text=group_success_message_text, 
                    parse_mode="HTML",
                    disable_notification=True 
                )
                logger.info(f"[SUB_CALLBACK_GROUP_MSG_SENT] –¢–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –¥–ª—è {user_mention}, ID: {sent_group_msg.message_id}.")
                asyncio.create_task(self._delete_message_after_delay(chat_id, sent_group_msg.message_id, 3)) # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            except Exception as e_group_msg:
                logger.error(f"[SUB_CALLBACK_GROUP_MSG_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id} –¥–ª—è {user_mention}: {e_group_msg}", exc_info=True)


            await self.db.reset_sub_fail_count(user_id=user.id, chat_id=chat_id)
            logger.info(f"[SUB_CALLBACK_RESET_FAIL_COUNT] –°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {user_mention} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}.")
            
            await self.unban_user_for_subscription(user_id=user.id, chat_id=chat_id)
            logger.info(f"[SUB_CALLBACK_UNBAN_TRIGGERED] –í—ã–∑–≤–∞–Ω unban_user_for_subscription –¥–ª—è {user_mention} (ID: {user.id}) –≤ —á–∞—Ç–µ {chat_id}.")

        else: # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            logger.info(f"[SUB_CALLBACK_FAIL] {user_mention} (ID: {user.id}) –ù–ï –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∞—Ç–µ {chat_id}. –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {unsubscribed_channels}")
            
            channels_to_subscribe_info = await self.db.get_channels_info_by_ids(unsubscribed_channels)
            
            alert_text_parts = []
            channels_list_str_for_edit_msg = [] # –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

            if channels_to_subscribe_info:
                alert_text_parts.append(f"üö´ {user_mention}, –≤—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞:")
                channels_list_str_for_edit_msg.append(f"{user_mention}, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:")

                for ch_info in channels_to_subscribe_info:
                    title = ch_info.get('channel_title', f'–ö–∞–Ω–∞–ª ID {ch_info["channel_id"]}')
                    link = ch_info.get('channel_link') 
                    
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π/–∂–∏—Ä–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                    channel_line_for_msg = f"üîó {hlink(title, link)}" if link else f"üìõ {hbold(title)}"
                    
                    # –î–ª—è –∞–ª–µ—Ä—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    alert_text_parts.append(f"  ‚Ä¢ {title}") 
                    channels_list_str_for_edit_msg.append(f"  ‚Ä¢ {channel_line_for_msg}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

                alert_text_parts.append("\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.") # –î–≤–æ–π–Ω–æ–π \n –¥–ª—è –∞–ª–µ—Ä—Ç–∞
                channels_list_str_for_edit_msg.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
                channels_list_str_for_edit_msg.append("–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
            
            else: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                alert_text_parts.append(f"üö´ {user_mention}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                channels_list_str_for_edit_msg.append(f"{user_mention}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ö–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫.")

            final_alert_text = "\n".join(alert_text_parts) # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞
            final_edit_message_text = "\n".join(channels_list_str_for_edit_msg) # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            # detailed_missing_channels_for_keyboard —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å –∑–∞–Ω–æ–≤–æ
            # –Ω–∞ –æ—Å–Ω–æ–≤–µ unsubscribed_channels, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π
            detailed_keyboard_channels_info = []
            if unsubscribed_channels:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                # –≠—Ç–æ –¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ send_subscription_warning, –Ω–æ —Ç—É—Ç —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä, –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ—â–µ –≥–¥–µ-—Ç–æ
                for ch_id_loop in unsubscribed_channels:
                    ch_title_kb = f"–ö–∞–Ω–∞–ª {ch_id_loop}"
                    ch_link_kb = None
                    try:
                        ch_obj_kb = await self.bot.get_chat(ch_id_loop)
                        ch_title_kb = ch_obj_kb.title or ch_title_kb
                        ch_username_kb = getattr(ch_obj_kb, 'username', None)
                        ch_invite_link_kb = getattr(ch_obj_kb, 'invite_link', None)
                        if ch_username_kb: ch_link_kb = f"https://t.me/{ch_username_kb}"
                        elif ch_invite_link_kb: ch_link_kb = ch_invite_link_kb
                    except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ
                    detailed_keyboard_channels_info.append({
                        'id': ch_id_loop, 
                        'title': ch_title_kb, 
                        'invite_link': ch_link_kb,
                        'username': ch_link_kb.split('/')[-1] if ch_link_kb and "t.me/" in ch_link_kb else None
                    })
            
            reply_markup_for_edit = get_subscription_check_keyboard(user.id, detailed_keyboard_channels_info if detailed_keyboard_channels_info else [])


            try: # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                await self.bot.edit_message_text(
                    text=final_edit_message_text,
                    chat_id=chat_id,
                    message_id=message_id_of_button,
                    reply_markup=reply_markup_for_edit, # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                logger.info(f"[SUB_CALLBACK_EDITED] –°–æ–æ–±—â–µ–Ω–∏–µ {message_id_of_button} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {user_mention} –≤ —á–∞—Ç–µ {chat_id} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö.")
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(self._delete_message_after_delay(chat_id, message_id_of_button, 15))
            except TelegramAPIError as e_edit:
                logger.error(f"[SUB_CALLBACK_EDIT_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id_of_button} –¥–ª—è {user_mention} –≤ —á–∞—Ç–µ {chat_id}: {e_edit}")
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ,
                # –Ω–æ –ø–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–∫–∞–∑–æ–º –∞–ª–µ—Ä—Ç–∞.

            try: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback_query.answer(final_alert_text, show_alert=True, cache_time=5) # cache_time –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
                logger.info(f"[SUB_CALLBACK_ALERT_SENT] Alert –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_mention} –≤ —á–∞—Ç–µ {chat_id}.")
            except TelegramAPIError as e_alert: 
                logger.error(f"[SUB_CALLBACK_ALERT_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å alert {user_mention} –≤ —á–∞—Ç–µ {chat_id}: {e_alert}")
                # –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç –Ω–µ –ø—Ä–æ—à–µ–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å)

    async def send_subscription_warning(
        self,
        chat_id: int,
        user: types.User,
        missing_channel_ids: List[int],
        user_initiated: bool = False # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–Ω–æ–ø–∫–æ–π)
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å HTML –∏ –∫–Ω–æ–ø–∫–æ–π."""
        user_mention = get_user_mention_html(user)
        # channels_info = await self.db.get_channels_info_by_ids(missing_channel_ids) # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ë–î –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π/—Å—Å—ã–ª–æ–∫

        message_text_parts = []
        message_text_parts.append(
            f"{user_mention}, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:"
        )

        detailed_missing_channels_for_keyboard = [] # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"

        if not missing_channel_ids:
            logger.warning(format_sub_log("SUB_WARN_NO_CHANNELS", user_id=user.id, chat_id=chat_id,
                                           extra_info="–í—ã–∑–≤–∞–Ω send_subscription_warning, –Ω–æ —Å–ø–∏—Å–æ–∫ missing_channel_ids –ø—É—Å—Ç."))
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            return None

        for channel_id_loop in missing_channel_ids:
            channel_title_display = f"–ö–∞–Ω–∞–ª ID {channel_id_loop}" # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            channel_link_display = None # –°—Å—ã–ª–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_cached_chat_info, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç
                # –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é self.bot.get_chat()
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ get_cached_chat_info –ø–æ–¥—Ö–æ–¥–∏—Ç
                # –∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤:
                channel_obj = await self.bot.get_chat(channel_id_loop)
                
                current_title = channel_obj.title
                current_username = channel_obj.username if hasattr(channel_obj, 'username') else None
                current_invite_link = channel_obj.invite_link if hasattr(channel_obj, 'invite_link') else None

                if current_title:
                    channel_title_display = current_title
                
                if current_username:
                    channel_link_display = f"https://t.me/{current_username}"
                elif current_invite_link:
                    channel_link_display = current_invite_link
                
                logger.debug(format_sub_log("SUB_WARN_CH_INFO", user_id=user.id, chat_id=chat_id,
                                           extra_info=f"–ö–∞–Ω–∞–ª {channel_id_loop}: title='{current_title}', username='{current_username}', invite_link='{current_invite_link}', final_link='{channel_link_display}'"))

            except TelegramAPIError as e_get_chat:
                logger.error(format_sub_log("SUB_WARN_CH_FETCH_FAIL", user_id=user.id, chat_id=chat_id,
                                            extra_info=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id_loop}: {e_get_chat}"))
                # –û—Å—Ç–∞–≤–ª—è–µ–º title/link –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except Exception as e_unexpected_fetch:
                logger.error(format_sub_log("SUB_WARN_CH_FETCH_UNEXPECTED", user_id=user.id, chat_id=chat_id,
                                            extra_info=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id_loop}: {e_unexpected_fetch}"))


            if channel_link_display:
                message_text_parts.append(f"  ‚Ä¢ {hlink(channel_title_display, channel_link_display)}")
            else:
                message_text_parts.append(f"  ‚Ä¢ {hbold(channel_title_display)}")

            detailed_missing_channels_for_keyboard.append({
                'id': channel_id_loop,
                'title': channel_title_display,
                'invite_link': channel_link_display, 
                'username': channel_link_display.split('/')[-1] if channel_link_display and "t.me/" in channel_link_display else None
            })

        message_text_parts.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        message_text_parts.append("–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

        # –°–æ–±–∏—Ä–∞–µ–º HTML —Ç–µ–∫—Å—Ç
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "Pasha, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å..."
        # –î–∞–ª–µ–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        # –ó–∞—Ç–µ–º –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø)
        # –ó–∞—Ç–µ–º "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        final_text_parts = [message_text_parts[0]] 

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã (—ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –æ—Ç 1 –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ message_text_parts)
        # message_text_parts –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ: [intro, ch1, ch2, ..., "", "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏..."]
        # –ö–∞–Ω–∞–ª—ã —ç—Ç–æ message_text_parts[1:-2]
        if len(message_text_parts) > 2: # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª + intro + –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
            final_text_parts.extend(message_text_parts[1:-2])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ message_text_parts)
        final_text_parts.append(message_text_parts[-1])

        final_text_html = "\n".join(final_text_parts) # –ò—Å–ø–æ–ª—å–∑—É–µ–º \n –≤–º–µ—Å—Ç–æ <br>

        reply_markup = get_subscription_check_keyboard(user.id, detailed_missing_channels_for_keyboard)

        try:
            sent_msg = await self.bot.send_message(
                chat_id=chat_id,
                text=final_text_html,
                reply_markup=reply_markup,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            logger.info(format_sub_log("SUB_WARN_SENT", user_id=user.id, chat_id=chat_id, 
                                   extra_info=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_msg.message_id}"))
            # –£–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 120 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –æ—Ç –∫–Ω–æ–ø–∫–∏
            if not user_initiated: 
                asyncio.create_task(self._delete_message_after_delay(chat_id, sent_msg.message_id, 15))
            return sent_msg
        except TelegramAPIError as e:
            logger.error(format_sub_log("SUB_WARN_FAIL", user_id=user.id, chat_id=chat_id, extra_info=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}"))
            return None

    async def handle_subscription_failure(
        self,
        original_message: types.Message, # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É
        user: types.User, 
        chat: types.Chat, 
        unsubscribed_channel_ids: List[int],
        current_sub_fail_count: int, # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¢–ï–ö–£–©–ò–ô (–Ω–µ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π) —Å—á–µ—Ç—á–∏–∫
        max_fails_allowed: int, # –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3)
        mute_duration_minutes: int
    ):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ."""
        user_mention = get_user_mention_html(user)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        new_sub_fail_count = current_sub_fail_count + 1
        try:
            await self.db.update_sub_fail_count(user.id, chat.id, new_sub_fail_count)
            logger.info(format_sub_log("SUB_FAIL_COUNT_UPDATED", user_id=user.id, chat_id=chat.id,
                                   extra_info=f"–°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_sub_fail_count} (–±—ã–ª {current_sub_fail_count})."))
        except Exception as e_db_update_fail:
            logger.error(format_sub_log("SUB_FAIL_COUNT_DB_ERROR", user_id=user.id, chat_id=chat.id,
                                       extra_info=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á –Ω–∞ {new_sub_fail_count} –≤ –ë–î: {e_db_update_fail}"))
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å new_sub_fail_count "–∫–∞–∫ –µ—Å—Ç—å"
            # –ü–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
            pass


        # –ü–æ–ø—ã—Ç–∫–∞ 1 (new_sub_fail_count = 1)
        if new_sub_fail_count == 1:
            logger.info(format_sub_log("SUB_FAIL_ATTEMPT_1", user_id=user.id, chat_id=chat.id, 
                                   extra_info=f"–ü–µ—Ä–≤–∞—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."))
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await original_message.delete()
            except TelegramAPIError:
                logger.warning(format_sub_log("SUB_FAIL_MSG_DEL_ERR", user_id=user.id, chat_id=chat.id, 
                                       extra_info="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–µ."))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await self.send_subscription_warning(chat.id, user, unsubscribed_channel_ids)
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏

        # –ü–æ–ø—ã—Ç–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π (1 < new_sub_fail_count < max_fails_allowed)
        elif 1 < new_sub_fail_count < max_fails_allowed:
            logger.info(format_sub_log("SUB_FAIL_ATTEMPT_INTERMEDIATE", user_id=user.id, chat_id=chat.id, 
                                   extra_info=f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ({new_sub_fail_count}/{max_fails_allowed}). –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."))
            # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await original_message.delete()
            except TelegramAPIError:
                logger.warning(format_sub_log("SUB_FAIL_MSG_DEL_ERR", user_id=user.id, chat_id=chat.id, 
                                       extra_info="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –Ω–µ—É–¥–∞—á–µ."))
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (new_sub_fail_count == max_fails_allowed)
        elif new_sub_fail_count >= max_fails_allowed: # –ò—Å–ø–æ–ª—å–∑—É–µ–º >= –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            logger.info(format_sub_log("SUB_FAIL_ATTEMPT_LAST", user_id=user.id, chat_id=chat.id, 
                                   extra_info=f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ({new_sub_fail_count}/{max_fails_allowed}). –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É—Ç–∞."))
            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await original_message.delete()
            except TelegramAPIError:
                logger.warning(format_sub_log("SUB_FAIL_MSG_DEL_ERR", user_id=user.id, chat_id=chat.id, 
                                       extra_info="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ—É–¥–∞—á–µ."))

            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º—É—Ç
            mute_until_ts = int(time.time()) + (mute_duration_minutes * 60)
            try:
                await self.bot.restrict_chat_member(
                    chat_id=chat.id,
                    user_id=user.id,
                    permissions=types.ChatPermissions(can_send_messages=False),
                    until_date=datetime.datetime.fromtimestamp(mute_until_ts)
                )
                logger.info(format_sub_log("MUTE_APPLIED", user_id=user.id, chat_id=chat.id,
                                       extra_info=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –¥–æ {datetime.datetime.fromtimestamp(mute_until_ts)}."))
                
                await self.db.update_user_ban_status(
                    user_id=user.id,
                    chat_id=chat.id,
                    ban_until_ts=mute_until_ts
                )
                await self.db.reset_sub_fail_count(user.id, chat.id)
                logger.info(format_sub_log("SUB_FAIL_COUNT_RESET", user_id=user.id, chat_id=chat.id,
                                       extra_info="–°—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ –º—É—Ç–∞."))

                mute_message_text_parts_html = []
                mute_message_text_parts_html.append(
                    f"{user_mention}, –≤—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 30 –º–∏–Ω—É—Ç, "
                    f"—Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã."
                )

                if unsubscribed_channel_ids:
                    mute_message_text_parts_html.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:")
                    for channel_id_loop in unsubscribed_channel_ids:
                        channel_title_display = f"–ö–∞–Ω–∞–ª ID {channel_id_loop}"
                        channel_link_display = None
                        try:
                            channel_obj = await self.bot.get_chat(channel_id_loop)
                            current_title = channel_obj.title
                            current_username = channel_obj.username if hasattr(channel_obj, 'username') else None
                            current_invite_link = channel_obj.invite_link if hasattr(channel_obj, 'invite_link') else None
                            if current_title:
                                channel_title_display = current_title
                            if current_username:
                                channel_link_display = f"https://t.me/{current_username}"
                        except TelegramAPIError as e_get_chat_mute:
                            logger.warning(format_sub_log("MUTE_MSG_CH_FETCH_FAIL", user_id=user.id, chat_id=chat.id,
                                                        extra_info=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id_loop} –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—É—Ç–µ: {e_get_chat_mute}"))
                        except Exception as e_generic_fetch:
                            logger.error(format_sub_log("MUTE_MSG_CH_FETCH_UNEXPECTED", user_id=user.id, chat_id=chat.id,
                                                       extra_info=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id_loop} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—É—Ç–µ: {e_generic_fetch}"), exc_info=True)
                        
                        if channel_link_display:
                            mute_message_text_parts_html.append(f"  ‚Ä¢ {hlink(channel_title_display, channel_link_display)}")
                        else:
                            mute_message_text_parts_html.append(f"  ‚Ä¢ {hbold(channel_title_display)}")
                
                mute_message_text = "\n".join(mute_message_text_parts_html) # –ò—Å–ø–æ–ª—å–∑—É–µ–º \n –≤–º–µ—Å—Ç–æ <br>
                
                try:
                    sent_mute_msg = await self.bot.send_message(chat.id, mute_message_text, parse_mode="HTML", disable_web_page_preview=True)
                    asyncio.create_task(self._delete_message_after_delay(chat.id, sent_mute_msg.message_id, 10))
                except Exception as e_send_mute_msg:
                    logger.error(format_sub_log("MUTE_MSG_SEND_FAIL", user_id=user.id, chat_id=chat.id,
                                               extra_info=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º—É—Ç–µ: {e_send_mute_msg}"))

            except TelegramAPIError as e:
                logger.error(format_sub_log("MUTE_FAIL_API", user_id=user.id, chat_id=chat.id, extra_info=f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º—É—Ç–∞: {e}"))
            except Exception as e_db_ban: # –≠—Ç–æ—Ç except –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ, —á—Ç–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π TelegramAPIError
                 logger.error(format_sub_log("MUTE_DB_UPDATE_FAIL", user_id=user.id, chat_id=chat.id, extra_info=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –≤ –ë–î: {e_db_ban}"))
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    async def _delete_message_after_delay(self, chat_id: int, message_id: int, delay: int):
        """Deletes a message after a specified delay."""
        logger.info(f"[DELETE_TASK_STARTED] –ó–∞–¥–∞—á–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫. –ó–ê–ü–£–©–ï–ù–ê.")
        await asyncio.sleep(delay)
        logger.info(f"[DELETE_TASK_AWOKE] –ó–∞–¥–∞—á–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}. –ü–†–û–°–ù–£–õ–ê–°–¨ –ø–æ—Å–ª–µ {delay} —Å–µ–∫. –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...")
        try:
            await self.bot.delete_message(chat_id, message_id)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º format_sub_log, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ logger.info
            # logger.info(format_sub_log("SUB_DEL_SUCCESS", chat_id=chat_id, extra_info=f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."))
            logger.info(f"[SUB_DEL_SUCCESS] –ß–∞—Ç {chat_id}: –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.") # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        except TelegramAPIError as e:
            # logger.warning(format_sub_log("SUB_DEL_FAIL", chat_id=chat_id, extra_info=f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}"))
            logger.warning(f"[SUB_DEL_FAIL] –ß–∞—Ç {chat_id}: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}") # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–æ–≥
        except Exception as e_unexp:
            logger.error(f"[DELETE_TASK_UNEXPECTED_ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e_unexp}", exc_info=True)

    async def unban_user_for_subscription(self, user_id: int, chat_id: int):
        """–°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞/—Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –≤ –ë–î."""
        try:
            await self.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                    can_change_info=False, # –û–±—ã—á–Ω–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º
                    can_invite_users=True,
                    can_pin_messages=False # –û–±—ã—á–Ω–æ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º
                ),
                until_date=0  # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            )
            logger.info(format_sub_log("UNBAN_SUCCESS", user_id=user_id, chat_id=chat_id, extra_info="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–Ω—è—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏."))
        except TelegramAPIError as e:
            logger.error(format_sub_log("UNBAN_FAIL_API", user_id=user_id, chat_id=chat_id, extra_info=f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}"))
        
        try:
            await self.db.clear_user_ban_status(user_id, chat_id)
            await self.db.reset_sub_fail_count(user_id, chat_id)
            logger.info(format_sub_log("UNBAN_DB_SUCCESS", user_id=user_id, chat_id=chat_id, extra_info="–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á —Å–±—Ä–æ—à–µ–Ω—ã –≤ –ë–î."))
        except Exception as e:
            logger.error(format_sub_log("UNBAN_DB_FAIL", user_id=user_id, chat_id=chat_id, extra_info=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞/—Å—á–µ—Ç—á–∏–∫–∞ –≤ –ë–î: {e}"))

    # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ handle_unsubscribed_user, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –ø–æ–∑–∂–µ
    # async def handle_unsubscribed_user(
    #     self, 
    #     message: types.Message, 
    #     user: types.User, 
    #     chat: types.Chat, 
    #     unsubscribed_channel_ids: List[int],
    #     current_sub_fail_count: int, 
    #     max_fails: int, 
    #     mute_minutes: int
    # ):
    #     """
    #     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
    #     –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º—É—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    #     """
    #     logger.info(format_sub_log("HANDLE_UNSUB", user.id, user.full_name, chat.id, chat.title, 
    #                               f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö–∞–Ω–∞–ª—ã: {unsubscribed_channel_ids}"))

    #     1. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –≤ –ë–î
    #     new_fail_count = current_sub_fail_count + 1
    #     await self.db.update_sub_fail_count(user.id, chat.id, increment_by=1) 
    #     logger.info(format_sub_log("FAIL_COUNT_INC", user.id, user.full_name, chat.id, chat.title, 
    #                               f"–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–∞–ª–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {new_fail_count} (–±—ã–ª–æ {current_sub_fail_count})."))

    #     2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    #     user_mention_html = get_user_mention_html(user)
    #     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ is_admin_user –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –∏–ª–∏ False –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    #     await self.send_subscription_warning(
    #         chat_id=chat.id,
    #         user_id=user.id,
    #         user_mention=user_mention_html,
    #         missing_channel_ids=unsubscribed_channel_ids
    #     )
    #     logger.debug(format_sub_log("WARN_SENT", user.id, user.full_name, chat.id, chat.title, 
    #                                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."))

    #     3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º—É—Ç
    #     if new_fail_count >= max_fails:
    #         mute_duration_seconds = mute_minutes * 60
    #         # until_date = int(time.time()) + mute_duration_seconds # –î–ª—è aiogram 2
    #         # –î–ª—è aiogram 3 –∏—Å–ø–æ–ª—å–∑—É–µ–º timedelta
    #         until_date = datetime.datetime.now() + datetime.timedelta(seconds=mute_duration_seconds)

    #         try:
    #             await self.bot.restrict_chat_member(
    #                 chat_id=chat.id,
    #                 user_id=user.id,
    #                 permissions=types.ChatPermissions(can_send_messages=False), # –ó–∞–ø—Ä–µ—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    #                 until_date=until_date 
    #             )
    #             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–µ –≤ –ë–î
    #             # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤: –ø–µ—Ä–µ–¥–∞–µ–º user_id, chat_id, –∏ timestamp –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    #             await self.db.update_user_ban_status(user_id=user.id, chat_id=chat.id, ban_until=int(until_date.timestamp()))
    #             logger.info(format_sub_log("MUTE_APPLIED", user.id, user.full_name, chat.id, chat.title,
    #                                       f"–ü–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {mute_minutes} –º–∏–Ω. ({new_fail_count}/{max_fails} –ø–æ–ø—ã—Ç–æ–∫). –î–æ {until_date}"))
    #         except TelegramAPIError as e:
    #             logger.error(format_sub_log("MUTE_ERROR", user.id, user.full_name, chat.id, chat.title, 
    #                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–¥–∞—Ç—å –º—É—Ç: {e}"))
    #         except Exception as e_ban_db:
    #              logger.error(format_sub_log("MUTE_DB_ERROR", user.id, user.full_name, chat.id, chat.title, 
    #                                        f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–∞–Ω–∞ –≤ –ë–î: {e_ban_db}"))


    #     4. –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    #     if message and message.message_id: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
    #         try:
    #             await message.delete()
    #             logger.info(format_sub_log("MSG_DELETED", user.id, user.full_name, chat.id, chat.title, 
    #                                       "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."))
    #         except TelegramAPIError as e:
    #             if "message to delete not found" in str(e).lower():
    #                 logger.warning(format_sub_log("MSG_DELETE_NOT_FOUND", user.id, user.full_name, chat.id, chat.title, 
    #                                             "–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."))
    #             else:
    #                 logger.warning(format_sub_log("MSG_DELETE_ERROR", user.id, user.full_name, chat.id, chat.title, 
    #                                             f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"))
    #         except Exception as e_del_unexpected:
    #              logger.error(format_sub_log("MSG_DELETE_UNEXPECTED", user.id, user.full_name, chat.id, chat.title, 
    #                                             f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e_del_unexpected}")) 