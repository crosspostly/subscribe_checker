"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∫–∞–ø—á–∏.
"""
import logging
import asyncio
from aiogram import Bot, types
from aiogram.exceptions import TelegramAPIError
from aiogram.types import ChatPermissions
from typing import Optional
import time
from html import escape

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DatabaseManager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
from bot.db.database import DatabaseManager 
# –£–î–ê–õ–Ø–ï–ú –∏–º–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# from bot.bot_instance import db_manager 
from ..keyboards.inline import get_captcha_keyboard
from ..utils.helpers import get_user_mention_html

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –∫–∞–ø—á–∏
def format_captcha_log(chat_id, chat_title, user_id, user_name, message, message_id=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–∞–ø—á–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_info = f"{user_name} (ID: {user_id})" if user_name else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
    chat_info = f"{chat_title} (ID: {chat_id})" if chat_title else f"–ß–∞—Ç {chat_id}"
    msg_info = f" (—Å–æ–æ–±—â–µ–Ω–∏–µ: {message_id})" if message_id else ""
    
    return f"[CAPTCHA] {user_info} –≤ —á–∞—Ç–µ {chat_info}{msg_info}: {message}"

class CaptchaService:
    def __init__(self, bot: Bot, db_manager: DatabaseManager):
        self.bot = bot
        self.db_manager = db_manager
        self._captcha_cleanup_tasks = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–ø—á–∏

    async def send_captcha(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –∏ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = message.from_user
        chat_id = message.chat.id
        chat_title = message.chat.title or f"–ß–∞—Ç {chat_id}"

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ ---
        chat_settings = await self.db_manager.get_chat_settings(chat_id)
        if not chat_settings or not chat_settings.get('is_activated', 0):
            logger.debug(format_captcha_log(chat_id, chat_title, user.id, user.full_name, 
                                     f"–ö–∞–ø—á–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."))
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            try:
                await message.delete()
                logger.debug(format_captcha_log(chat_id, chat_title, user.id, user.full_name, 
                                        f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ (—á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)."))
            except TelegramAPIError:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            return # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
        # ---------------------------------
            
        user_name = user.full_name
        user_mention = get_user_mention_html(user)

        try:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()
            logger.debug(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                    f"–£–¥–∞–ª–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", message.message_id))
        except TelegramAPIError as e:
            logger.warning(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}", message.message_id))

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
            captcha_msg = await self.bot.send_message(
                chat_id,
                f"üõ°Ô∏è {user_mention}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=get_captcha_keyboard(user.id),
                parse_mode="HTML",
                disable_notification=True
            )
            logger.info(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                  f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ (–±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 10 —Å–µ–∫—É–Ω–¥)", captcha_msg.message_id))
            
            # <--- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏ --- >
            await self.db_manager.add_bot_message_for_cleanup(chat_id, captcha_msg.message_id)
            logger.debug(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                   f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {captcha_msg.message_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."))
            # <---------------------------------------------------------- >

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            task_key = (chat_id, captcha_msg.message_id)
            if task_key in self._captcha_cleanup_tasks:
                # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –æ–Ω–∞ –µ—â–µ –≤–∏—Å–∏—Ç
                self._captcha_cleanup_tasks[task_key].cancel()
                logger.debug(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                       f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {captcha_msg.message_id}", captcha_msg.message_id))

            self._captcha_cleanup_tasks[task_key] = asyncio.create_task(
                self._delete_message_after_delay(chat_id, chat_title, captcha_msg.message_id, 10, user.id, user_name)
            )
            logger.debug(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                   f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {captcha_msg.message_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.", captcha_msg.message_id))

        except TelegramAPIError as e:
            logger.error(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                  f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏: {e}"))
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ö–æ—Ç—è –≤—ã—à–µ —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å)
            try:
                await message.delete()
            except TelegramAPIError:
                pass
        except Exception as e:
            logger.critical(format_captcha_log(chat_id, chat_title, user.id, user_name, 
                                     f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏: {e}"), exc_info=True)

    async def _delete_message_after_delay(self, chat_id: int, chat_title: str, message_id: int, delay: int, user_id: int = None, user_name: str = None):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –ë–î –æ—á–∏—Å—Ç–∫–∏."""
        task_key = (chat_id, message_id) # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∑–∞–¥–∞—á–∏
        logger.debug(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                               f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥", message_id))
        await asyncio.sleep(delay)

        max_attempts = 2
        attempt_delay_seconds = 2
        deleted_successfully_from_tg = False

        try:
            for attempt in range(max_attempts):
                try:
                    await self.bot.delete_message(chat_id, message_id)
                    logger.info(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                           f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})."))
                    deleted_successfully_from_tg = True
                    break
                except TelegramAPIError as e:
                    error_message = str(e).lower()
                    if "message to delete not found" in error_message or \
                       "message can't be deleted" in error_message:
                        logger.warning(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                                 f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ: {e} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})."))
                        deleted_successfully_from_tg = True
                        break
                    
                    logger.warning(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                             f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏ {message_id} –≤ Telegram: {e}"))
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(attempt_delay_seconds)
                    else:
                        logger.error(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {message_id} –∏–∑ Telegram –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {e}"))
                except Exception as e_general:
                    logger.error(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                           f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ø—á–∏ {message_id} –∏–∑ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e_general}"), exc_info=True)
                    if attempt < max_attempts - 1:
                        await asyncio.sleep(attempt_delay_seconds)
                    else:
                        logger.critical(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                           f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª–∏–ª–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {message_id} –∏–∑ Telegram –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫."), exc_info=True)
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—à–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Ç)
            if task_key in self._captcha_cleanup_tasks:
                del self._captcha_cleanup_tasks[task_key]
                logger.debug(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                       f"–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—á–∏ {message_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."))

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram (–∏–ª–∏ –µ–≥–æ —Ç–∞–º –∏ –Ω–µ –±—ã–ª–æ),
        # —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞—à–µ–π –ë–î (–æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—á–∏—Å—Ç–∫—É)
        if deleted_successfully_from_tg:
            try:
                await self.db_manager.remove_bot_message_from_cleanup(chat_id, message_id)
                logger.info(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                       f"–ó–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–ø—á–∏ {message_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î –æ—á–∏—Å—Ç–∫–∏."))
            except Exception as e_db:
                logger.error(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                       f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–ø—á–∏ {message_id} –∏–∑ –ë–î –æ—á–∏—Å—Ç–∫–∏: {e_db}"), exc_info=True)
        else:
            logger.warning(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                                     f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {message_id} –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Telegram, –∑–∞–ø–∏—Å—å –≤ –ë–î –æ—á–∏—Å—Ç–∫–∏ –ù–ï —É–¥–∞–ª–µ–Ω–∞."))

    async def is_user_verified(self, user_id: int, chat_id: int, chat_title: str = None, user_name: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ."""
        # –£–î–ê–õ–Ø–ï–ú –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç DatabaseManager –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        # from bot.bot_instance import db_manager 
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
        user_status = await self.db_manager.get_user_status_in_chat(user_id, chat_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.db_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø—á—É
        captcha_passed = user_status and user_status['captcha_passed'] if user_status else 0
        
        status_str = "–ø—Ä–æ—à–µ–ª" if captcha_passed else "–Ω–µ –ø—Ä–æ—à–µ–ª"
        logger.debug(format_captcha_log(chat_id, chat_title, user_id, user_name, 
                               f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏: {status_str} (DB: {captcha_passed})"))
        return bool(captcha_passed)
        
    async def start_captcha_for_user(self, bot: Bot, chat_id: int, user_id: int, user_name: str, chat_title: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–ø—á—É –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç."""

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ ---
        chat_settings = await self.db_manager.get_chat_settings(chat_id)
        actual_chat_title = chat_title or f"–ß–∞—Ç {chat_id}"

        if not chat_settings or not chat_settings.get('is_activated', 0):
            logger.debug(f"[CAPTCHA] –ö–∞–ø—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è {user_id} –≤ —á–∞—Ç–µ {actual_chat_title} ({chat_id}) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return 
        # ---------------------------------
           
        try:
            escaped_user_name = escape(user_name)
            user_mention = f"<a href='tg://user?id={user_id}'>{escaped_user_name}</a>"
            
            current_status = await self.is_user_verified(user_id, chat_id, actual_chat_title, user_name)
            if current_status:
                logger.info(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                     f"–ö–∞–ø—á–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–π –∫–∞–ø—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ"))
                return
                
            captcha_msg = await bot.send_message(
                chat_id,
                f"üõ°Ô∏è {user_mention}, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=get_captcha_keyboard(user_id),
                parse_mode="HTML",
                disable_notification=True
            )
            logger.info(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                  f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç (–±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 60 —Å–µ–∫—É–Ω–¥)", captcha_msg.message_id)) # –£–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –º—É—Ç 60 –º–∏–Ω—É—Ç

            await self.db_manager.add_bot_message_for_cleanup(chat_id, captcha_msg.message_id)
            logger.debug(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                   f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏ {captcha_msg.message_id} (–ø—Ä–∏ –≤—Ö–æ–¥–µ) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (–∏–ª–∏ –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è)
            task_key = (chat_id, captcha_msg.message_id)
            if task_key in self._captcha_cleanup_tasks:
                 self._captcha_cleanup_tasks[task_key].cancel()
                 logger.debug(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                       f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {captcha_msg.message_id} (–ø—Ä–∏ –≤—Ö–æ–¥–µ)", captcha_msg.message_id))

            self._captcha_cleanup_tasks[task_key] = asyncio.create_task(
                self._delete_message_after_delay(chat_id, actual_chat_title, captcha_msg.message_id, 60, user_id, user_name) # –ó–∞–¥–µ—Ä–∂–∫–∞ 60 —Å–µ–∫—É–Ω–¥
            )
            logger.debug(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                   f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {captcha_msg.message_id} (–ø—Ä–∏ –≤—Ö–æ–¥–µ) –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.", captcha_msg.message_id))

            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(
                    can_send_messages=False,
                    can_send_media_messages=False,
                    can_send_polls=False,
                    can_send_other_messages=False,
                    can_add_web_page_previews=False,
                    can_change_info=False,
                    can_invite_users=False,
                    can_pin_messages=False
                ),
                until_date=int(time.time()) + (60 * 60) # –ú—É—Ç –Ω–∞ 60 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –∏–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤—ã–π–¥–µ—Ç
            )
            logger.info(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º—É—Ç –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ."))

        except Exception as e:
            logger.error(format_captcha_log(chat_id, actual_chat_title, user_id, user_name, 
                                  f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–ø—á–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}"), exc_info=True)
