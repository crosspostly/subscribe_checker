"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö.

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.
"""
import logging
from aiogram import Router, Bot, F, types
from aiogram.filters import Command, ChatMemberUpdatedFilter, ADMINISTRATOR, Filter, IS_ADMIN, IS_MEMBER
from aiogram.enums import ChatType, ContentType, ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatMemberUpdated, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError
from typing import Union, Dict, Any
from aiogram.utils.markdown import hbold, hlink
import asyncio

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from bot.db.database import DatabaseManager
# –ò–º–ø–æ—Ä—Ç actual_bot_username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ bot.bot_instance
# from bot.config import actual_bot_username # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
from bot.keyboards.inline import get_confirm_setup_keyboard
from bot.services.channel_mgmt import ChannelManagementService
from bot.utils.helpers import get_user_mention_html
from bot.states import ManageChannels
from bot.bot_instance import bot, db_manager, actual_bot_username # <--- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –û–¢–°–Æ–î–ê
from bot.middlewares.db_middleware import DbSessionMiddleware
from bot.middlewares.bot_middleware import BotMiddleware
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ConfirmSetupCallback
from bot.data.callback_data import ConfirmSetupCallback

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º format_log_message –∏–∑ group_messages 
# (–í –∏–¥–µ–∞–ª–µ –µ–≥–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ utils, –Ω–æ –ø–æ–∫–∞ —Ç–∞–∫ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–∞)
# –ï—Å–ª–∏ group_messages.py –≤ —Ç–æ–º –∂–µ –ø–∞–∫–µ—Ç–µ (handlers), —Ç–æ from .group_messages import format_log_message
# –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ from bot.handlers.group_messages import format_log_message
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ handlers
try:
    from .group_messages import format_log_message
except ImportError:
    # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞–∫–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è)
    from bot.handlers.group_messages import format_log_message

logger = logging.getLogger(__name__)
group_admin_router = Router() # <--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
group_admin_router.message.middleware.register(DbSessionMiddleware(db_manager))
group_admin_router.chat_member.middleware.register(DbSessionMiddleware(db_manager))
group_admin_router.my_chat_member.middleware.register(DbSessionMiddleware(db_manager))
group_admin_router.callback_query.middleware.register(DbSessionMiddleware(db_manager))

group_admin_router.message.middleware.register(BotMiddleware(bot))
group_admin_router.chat_member.middleware.register(BotMiddleware(bot))
group_admin_router.my_chat_member.middleware.register(BotMiddleware(bot))
group_admin_router.callback_query.middleware.register(BotMiddleware(bot))

# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–∏–ø —á–∞—Ç–∞ (–≥—Ä—É–ø–ø–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)
group_admin_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
group_admin_router.chat_member.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–æ–≤ —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–ª–ª–±—ç–∫–∏ –∏–∑ –≥—Ä—É–ø–ø
group_admin_router.callback_query.filter(F.message.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–¥–æ–≤ setup_{user_id} ---
class SetupCodeFilter(Filter):
    async def __call__(self, message: types.Message) -> Union[bool, Dict[str, Any]]:
        if not message.text:
            return False
        parts = message.text.strip().split('_')
        if len(parts) == 2 and parts[0] == 'setup' and parts[1].isdigit():
            user_id_to_setup = int(parts[1])
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ
            return {"user_id_to_setup": user_id_to_setup}
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ --- #

# 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª)
@group_admin_router.chat_member(
    ChatMemberUpdatedFilter(member_status_changed=IS_MEMBER >> IS_ADMIN)
)
# 2. –£ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∞
@group_admin_router.chat_member(
    ChatMemberUpdatedFilter(member_status_changed=IS_ADMIN >> IS_ADMIN)
)
async def on_admin_status_change(event: ChatMemberUpdated, bot: Bot, db_manager: DatabaseManager):
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ –ø—Ä–∞–≤."""
    chat_id = event.chat.id
    chat_title = event.chat.title or f"–ß–∞—Ç ID {chat_id}"
    new_admin_user = event.new_chat_member.user
    actor_user = event.from_user # –ö—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ

    logger.info(f"[ADMIN_EVENT] –í —á–∞—Ç–µ {chat_id} ('{chat_title}') –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å/–ø—Ä–∞–≤–∞ admin {new_admin_user.id} ({new_admin_user.full_name}). –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {actor_user.id}")

    # –ï—Å–ª–∏ –±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
    bot_info = await bot.get_me()
    if new_admin_user.id == bot_info.id:
        logger.info(f"[ADMIN_EVENT] –ú–µ–Ω—è ({bot_info.username}) –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ {chat_id}. –î–æ–±–∞–≤–ª—è—é —á–∞—Ç –≤ –ë–î.")
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        await db_manager.add_chat_if_not_exists(
            chat_id=chat_id,
            chat_title=chat_title,
            added_by_user_id=actor_user.id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        try:
            await bot.send_message(
                chat_id,
                f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —á–∞—Ç–µ {hbold(chat_title)}.\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ({hlink(actor_user.first_name, f'tg://user?id={actor_user.id}')}) –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è.\n\n"
                f"‚û°Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π (@{bot_info.username}), –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /code, "
                f"–∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å—é–¥–∞.",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"[ADMIN_EVENT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")
    else:
        # –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É (–∏–ª–∏ –≤ —á–∞—Ç) –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        logger.debug(f"[ADMIN_EVENT] –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_admin_user.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}.")
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ –¢–ó
        pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) --- #
# @group_admin_router.chat_member(
#     ChatMemberUpdatedFilter(member_status_changed=IS_ADMIN >> IS_MEMBER)
# )
# async def on_admin_demoted(...):
#     ...

# --- –•–µ–Ω–¥–ª–µ—Ä—ã --- #

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ –ø—Ä–∞–≤
@group_admin_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=ADMINISTRATOR))
async def handle_admin_promotion_wrapper(event: types.ChatMemberUpdated, bot: Bot, db_manager: DatabaseManager, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –±–æ—Ç—É –≤—ã–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    # –õ–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–µ–π –∏–ª–∏ –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –Ω–æ–≤—ã–π —Ñ–ª–æ—É
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, –µ–µ —Å—Ç–æ–∏—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å flow —á–µ—Ä–µ–∑ –∫–æ–¥
    # !!! –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–¥ –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π state.key(), –µ–≥–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å !!!
    user_id_who_promoted = event.from_user.id
    bot_id = bot.id
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á FSM, chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID —á–∞—Ç–∞, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ
    user_fsm_key = StorageKey(bot_id=bot_id, chat_id=event.chat.id, user_id=user_id_who_promoted)
    user_state = FSMContext(storage=state.storage, key=user_fsm_key)
    logger.info(f"[MY_CHAT_MEMBER] –ë–æ—Ç–∞ –ø–æ–≤—ã—Å–∏–ª–∏/–ø–æ–Ω–∏–∑–∏–ª–∏ –≤ –∞–¥–º–∏–Ω–∞—Ö –≤ —á–∞—Ç–µ {event.chat.id}, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {user_id_who_promoted}")
    # –õ–æ–≥–∏–∫–∞ ChannelManagementService.handle_admin_promotion –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ setup_{user_id} –≤ –≥—Ä—É–ø–ø–µ
@group_admin_router.message(SetupCodeFilter())
async def handle_setup_code(message: types.Message, bot: Bot, db_manager: DatabaseManager, user_id_to_setup: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥ –≤–∏–¥–∞ setup_{user_id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –≥—Ä—É–ø–ø—É."""
    sender = message.from_user
    chat = message.chat
    chat_title = chat.title or f"ID {chat.id}"

    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {message.text} –≤ —á–∞—Ç–µ {chat.id} ('{chat_title}') –æ—Ç {sender.id} ({sender.username}). –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id_to_setup}")

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
    try: 
        await message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {message.text} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat.id}.")
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º {message.text} –∏–∑ —á–∞—Ç–∞ {chat.id}: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    target_user_db_info = await db_manager.get_user(user_id_to_setup)
    if not target_user_db_info:
        logger.warning(f"–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_setup} –∏–∑ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –Ω–æ –ª—É—á—à–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        return

    # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ß–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω? ---
    chat_settings = await db_manager.get_chat_settings(chat.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–ª–∞–≥–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω True, —Å—á–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º.
    if chat_settings and (chat_settings.get('is_activated', False) or chat_settings.get('setup_complete', False)):
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {chat.id} ('{chat_title}') –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {sender.id}.")
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥
            await bot.send_message(
                sender.id,
                f"‚öôÔ∏è –ì—Ä—É–ø–ø–∞ <b>{chat_title}</b> —É–∂–µ –±—ã–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–Ω–µ–µ.",
                parse_mode="HTML"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–∞–º—É –≥—Ä—É–ø–ø—É
            try:
                sent_group_message = await bot.send_message(
                    chat.id,
                    f"‚ÑπÔ∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏."
                )
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                asyncio.create_task(delete_message_after_delay(sent_group_message, 5))
            except Exception as e_group_send:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {chat.id}: {e_group_send}")

        except TelegramForbiddenError:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender.id} (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω?), —É–≤–µ–¥–æ–º–ª—è—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Ç–∞ {chat.id}.")
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Ç–∞ {chat.id}: {e_notify}")
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò ---

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤ –õ–° —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç", callback_data=ConfirmSetupCallback(chat_id=chat.id, approve=True).pack())],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=ConfirmSetupCallback(chat_id=chat.id, approve=False).pack())]
    ])

    sender_mention = get_user_mention_html(sender) if sender else "–ö—Ç–æ-—Ç–æ"
    text_to_pm = (
        f"{sender_mention} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã <b>{chat_title}</b>.\n\n"
        f"–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã?"
    )

    try:
        await bot.send_message(user_id_to_setup, text_to_pm, reply_markup=keyboard, parse_mode="HTML")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_setup} –¥–ª—è —á–∞—Ç–∞ {chat.id}.")
    except TelegramForbiddenError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_setup} (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω?). –ß–∞—Ç {chat.id}.")
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≤ –≥—Ä—É–ø–ø—É
        try:
             target_user_mention = get_user_mention_html(types.User(id=target_user_db_info['user_id'], first_name=target_user_db_info.get('first_name', 'User'), is_bot=False, username=target_user_db_info.get('username')))
             await bot.send_message(chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_mention}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", parse_mode="HTML")
        except Exception as group_send_err:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Ç {chat.id}: {group_send_err}")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_setup} –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}")
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            target_user_mention = get_user_mention_html(types.User(id=target_user_db_info['user_id'], first_name=target_user_db_info.get('first_name', 'User'), is_bot=False, username=target_user_db_info.get('username')))
            await bot.send_message(chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_mention}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        except Exception as group_send_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API –≤ —á–∞—Ç {chat.id}: {group_send_err}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ---
async def delete_message_after_delay(message: types.Message, delay: int):
    await asyncio.sleep(delay)
    try:
        await message.delete()
        logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –≤ —á–∞—Ç–µ {message.chat.id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –≤ —á–∞—Ç–µ {message.chat.id}: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ ---

@group_admin_router.message(Command("channels"))
async def cmd_manage_channels(message: types.Message, bot: Bot, db_manager: DatabaseManager, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /channels –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤."""
    user = message.from_user
    chat = message.chat
    chat_title = chat.title or f"ID {chat.id}"

    # 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    chat_settings = await db_manager.get_chat_settings(chat.id)
    if not chat_settings:
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω/–Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ /channels –≤ —á–∞—Ç–µ {chat.id}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        await message.reply("üòï –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —á–∞—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    if not chat_settings.get('setup_complete', False):
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ /channels –≤ —á–∞—Ç–µ {chat.id}, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        await message.reply(f"‚öôÔ∏è –≠—Ç–æ—Ç —á–∞—Ç –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –≤ –º–æ–∏—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (@{actual_bot_username}), –∞ –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—é–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    try:
        member = await bot.get_chat_member(chat_id=chat.id, user_id=user.id)
        if not isinstance(member, (types.ChatMemberOwner, types.ChatMemberAdministrator)):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.full_name}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /channels –≤ —á–∞—Ç–µ {chat.id}, –Ω–µ –±—É–¥—É—á–∏ –∞–¥–º–∏–Ω–æ–º.")
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
            return
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º (invite_users), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–∂–µ
        # if isinstance(member, types.ChatMemberAdministrator) and not member.can_invite_users:
        #     logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /channels –≤ —á–∞—Ç–µ {chat.id} –±–µ–∑ –ø—Ä–∞–≤–∞ 'invite_users'.")
        #     await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤.")
        #     return

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ {user.id} –≤ —á–∞—Ç–µ {chat.id}: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    logger.info(f"–ê–¥–º–∏–Ω {user.id} ({user.full_name}) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª /channels –≤ —á–∞—Ç–µ {chat.id} ('{chat_title}').")

    # 2. –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
    try:
        await message.delete()
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /channels –∏–∑ —á–∞—Ç–∞ {chat.id}: {e}")

    # 3. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –õ–°
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ –ª–æ–≥–∏–∫–∏
    # TODO: –°–æ–∑–¥–∞—Ç—å ChannelManagementService –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    channel_mgmt_service = ChannelManagementService(bot, db_manager, state.storage) # –ü–µ—Ä–µ–¥–∞–µ–º storage –¥–ª—è FSM
    await channel_mgmt_service.start_channel_management(
        target_chat_id=chat.id,
        target_chat_title=chat_title,
        admin_user_id=user.id
    )

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã FSM (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–ª–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã) ---

# –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ ChatShared (FSM) - –ü–ï–†–ï–ù–ï–°–ï–ù–û –≤ fsm_private.py
# @group_admin_router.message(...)

# –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞ (FSM) - –ü–ï–†–ï–ù–ï–°–ï–ù–û –≤ fsm_private.py
# @group_admin_router.message(...)
# async def handle_wrong_channel_select_wrapper(...) 

# --- –ö–û–î –î–õ–Ø /RMChat –ü–ï–†–ï–ù–ï–°–ï–ù–ù–´–ô –ò–ó group_messages.py ---

CONFIRM_DELETE_CHAT_CALLBACK_PREFIX = "confirm_delete_chat:"
CANCEL_DELETE_CHAT_CALLBACK_PREFIX = "cancel_delete_chat:"

async def is_chat_admin_for_message(message: types.Message, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞."""
    if not message.from_user:
        return False
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è user {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}: {e}")
        return False

@group_admin_router.message(Command("rmchat"))
async def cmd_remove_chat_from_bot(message: types.Message, bot: Bot, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rmchat –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –õ–°."""
    chat_id = message.chat.id
    chat_title = message.chat.title or f"–ß–∞—Ç {chat_id}"
    
    if not message.from_user: # Should not happen for user commands
        logger.error(f"–ö–æ–º–∞–Ω–¥–∞ /rmchat –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ message.from_user –≤ —á–∞—Ç–µ {chat_id}")
        return

    user_id = message.from_user.id
    user_name = message.from_user.full_name

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º format_log_message, –µ—Å–ª–∏ –æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
    log_func = format_log_message if 'format_log_message' in globals() else lambda type, cid, ctitle, uid, uname, msg: f"[{type}] User {uid} ({uname}) in chat {cid} ({ctitle}): {msg}"
    
    logger.info(log_func("CMD_REMOVE_CHAT", chat_id, chat_title, user_id, user_name, "–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞"))

    if not await is_chat_admin_for_message(message, bot):
        logger.warning(log_func("CMD_REMOVE_CHAT", chat_id, chat_title, user_id, user_name, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –∞–¥–º–∏–Ω–æ–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è."))
        try:
            await message.delete() 
        except Exception:
            pass # Ignore if already deleted or no rights
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /rmchat –∏–∑ –≥—Ä—É–ø–ø—ã
    try:
        await message.delete()
        logger.info(log_func("CMD_REMOVE_CHAT", chat_id, chat_title, user_id, user_name, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /rmchat —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä—É–ø–ø—ã."))
    except TelegramAPIError as e:
        logger.warning(log_func("CMD_REMOVE_CHAT", chat_id, chat_title, user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /rmchat –∏–∑ –≥—Ä—É–ø–ø—ã: {e}"))


    confirm_button = InlineKeyboardButton(
        text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç", 
        callback_data=f"{CONFIRM_DELETE_CHAT_CALLBACK_PREFIX}{chat_id}"
    )
    cancel_button = InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", 
        callback_data=f"{CANCEL_DELETE_CHAT_CALLBACK_PREFIX}{chat_id}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[confirm_button], [cancel_button]])

    warning_text_pm = (
        f"‚ö†Ô∏è {hbold('–í–ù–ò–ú–ê–ù–ò–ï!')} ‚ö†Ô∏è\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ \"{hbold(chat_title)}\" (ID: `{chat_id}`) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞. "
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ç–æ–º—É, —á—Ç–æ –±–æ—Ç –ø–æ–∫–∏–Ω–µ—Ç —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ \"–î–∞, —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç\", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∏–ª–∏ \"–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞\" –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    try:
        await bot.send_message(
            user_id,
            warning_text_pm,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(log_func("CMD_REMOVE_CHAT_PM_SENT", chat_id, chat_title, user_id, user_name, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°."))
        
    except TelegramForbiddenError:
        logger.warning(log_func("CMD_REMOVE_CHAT_PM_FORBIDDEN", chat_id, chat_title, user_id, user_name, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)."))
        fallback_text_group = (
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ \"{hbold(chat_title)}\" –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({get_user_mention_html(message.from_user)}).\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–Ω—è –∏ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @{actual_bot_username})."
        )
        try:
            await bot.send_message(chat_id, fallback_text_group, parse_mode="HTML", disable_web_page_preview=True)
        except Exception as e_group_fallback:
            logger.error(log_func("CMD_REMOVE_CHAT_GROUP_FALLBACK_ERROR", chat_id, chat_title, user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e_group_fallback}"))

    except Exception as e:
        logger.error(log_func("CMD_REMOVE_CHAT_PM_ERROR", chat_id, chat_title, user_id, user_name, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –õ–°: {e}"), exc_info=True)
        error_feedback_group = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ \"{hbold(chat_title)}\" –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            await bot.send_message(chat_id, error_feedback_group, parse_mode="HTML")
        except Exception as e_group_err_send:
             logger.error(log_func("CMD_REMOVE_CHAT_GROUP_ERROR_SEND_ERROR", chat_id, chat_title, user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e_group_err_send}"))


@group_admin_router.callback_query(F.data.startswith(CONFIRM_DELETE_CHAT_CALLBACK_PREFIX))
async def handle_confirm_delete_chat_callback(callback_query: types.CallbackQuery, bot: Bot, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°)."""
    chat_id_to_delete = int(callback_query.data.split(":")[1])
    requesting_user_id = callback_query.from_user.id
    user_name = callback_query.from_user.full_name
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    group_chat_title_for_log = f"–ß–∞—Ç {chat_id_to_delete}" # Default
    try:
        group_chat_info = await bot.get_chat(chat_id_to_delete)
        if group_chat_info and group_chat_info.title:
            group_chat_title_for_log = group_chat_info.title
    except Exception as e_get_chat:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —á–∞—Ç–∞ {chat_id_to_delete} –¥–ª—è –ª–æ–≥–∞: {e_get_chat}")

    log_func = format_log_message if 'format_log_message' in globals() else lambda type, cid, ctitle, uid, uname, msg: f"[{type}] User {uid} ({uname}) in chat {cid} ('{ctitle}'): {msg}"

    try:
        member = await bot.get_chat_member(chat_id_to_delete, requesting_user_id) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –¶–ï–õ–ï–í–û–ú —á–∞—Ç–µ
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å.", show_alert=True)
            logger.warning(log_func("CALLBACK_CONFIRM_DELETE", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∞–¥–º–∏–Ω–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞."))
            # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–∞–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
            await callback_query.message.edit_text(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\". –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")
            return
    except Exception as e_perm_check:
        logger.error(log_func("CALLBACK_CONFIRM_DELETE_PERM_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e_perm_check}"), exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        await callback_query.message.edit_text(f"üõ† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–∏—Ö –ø—Ä–∞–≤ –¥–ª—è —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", parse_mode="HTML")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    logger.info(log_func("CALLBACK_CONFIRM_DELETE_INITIATED", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã."))

    original_message_id = callback_query.message.message_id if callback_query.message else None

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —á–∞—Ç–∞
        edit_success = False
        pre_leave_message_text = f"‚è≥ –ò–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\" (ID: `{chat_id_to_delete}`)..."
        if callback_query.message: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await callback_query.message.edit_text(pre_leave_message_text, parse_mode="HTML")
                edit_success = True
            except Exception as e_edit_pre:
                logger.warning(log_func("CALLBACK_CONFIRM_DELETE_EDIT_PRE_LEAVE_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –õ–° (msg_id: {original_message_id}): {e_edit_pre}"))
        else:
            logger.warning(log_func("CALLBACK_CONFIRM_DELETE_NO_MESSAGE_TO_EDIT_PRE", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ù–µ—Ç callback_query.message –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))

        deleted_from_db = await db_manager.delete_chat(chat_id_to_delete)
        
        final_message_text = ""
        # bot_left_chat_successfully = False # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–ª–µ–µ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å

        if deleted_from_db:
            logger.info(log_func("CHAT_DELETED_DB", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î."))
            final_message_text = f"‚úÖ –ß–∞—Ç \"{hbold(group_chat_title_for_log)}\" (ID: `{chat_id_to_delete}`) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
            try:
                await bot.leave_chat(chat_id_to_delete)
                logger.info(log_func("BOT_LEFT_CHAT", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç."))
                final_message_text += " –ë–æ—Ç —Ç–∞–∫–∂–µ –ø–æ–∫–∏–Ω—É–ª —ç—Ç–æ—Ç —á–∞—Ç."
                # bot_left_chat_successfully = True
            except TelegramForbiddenError:
                logger.warning(log_func("BOT_LEFT_CHAT_FORBIDDEN", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, 
                                              "–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω/–∑–∞–±–∞–Ω–µ–Ω)."))
                final_message_text += " –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω/–∑–∞–±–∞–Ω–µ–Ω)."
            except Exception as e_leave: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞
                logger.error(log_func("BOT_LEFT_CHAT_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞: {e_leave}"))
                final_message_text += f" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –±–æ—Ç–∞ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç: {str(e_leave)[:100]}."
        else:
            logger.error(log_func("CHAT_DELETE_DB_FAILED", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –ë–î (–º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª False)."))
            final_message_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\" –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."

        if edit_success and callback_query.message: # –ï—Å–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                await callback_query.message.edit_text(final_message_text, parse_mode="HTML")
            except Exception as e_edit_final:
                logger.error(log_func("CALLBACK_CONFIRM_DELETE_EDIT_FINAL_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –õ–° (msg_id: {original_message_id}) —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {e_edit_final}"))
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.send_message(requesting_user_id, final_message_text, parse_mode="HTML")
                except Exception as e_send_final_fallback:
                    logger.error(log_func("CALLBACK_CONFIRM_DELETE_SEND_FINAL_FALLBACK_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –õ–° –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ edit_final: {e_send_final_fallback}"))
        else: # –ï—Å–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.send_message(requesting_user_id, final_message_text, parse_mode="HTML")
                logger.info(log_func("CALLBACK_CONFIRM_DELETE_SEND_FINAL_NEW_MSG", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –õ–° —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º."))
            except Exception as e_send_final:
                 logger.error(log_func("CALLBACK_CONFIRM_DELETE_SEND_FINAL_ERROR_NO_PRE_EDIT", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –õ–° (–Ω–µ –±—ã–ª–æ pre-edit –∏–ª–∏ callback_query.message): {e_send_final}"))
        
        await callback_query.answer()

    except Exception as e:
        logger.error(log_func("CALLBACK_CONFIRM_DELETE_UNHANDLED_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}"), exc_info=True)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ
            error_message_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\". ID —á–∞—Ç–∞: `{chat_id_to_delete}`."
            if callback_query.message:
                try:
                    await callback_query.message.edit_text(error_message_text, parse_mode="HTML")
                except Exception as e_edit_fallback_error:
                    logger.warning(log_func("CALLBACK_CONFIRM_DELETE_EDIT_FALLBACK_ERROR", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –õ–° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ–±—â–µ–π –æ—à–∏–±–∫–µ: {e_edit_fallback_error}"))
                    await bot.send_message(requesting_user_id, error_message_text, parse_mode="HTML") # Fallback to send
            else:
                 await bot.send_message(requesting_user_id, error_message_text, parse_mode="HTML")
        except Exception as e_send_fallback_error_outer:
            logger.error(log_func("CALLBACK_CONFIRM_DELETE_SEND_FALLBACK_ERROR_OUTER", chat_id_to_delete, group_chat_title_for_log, requesting_user_id, user_name, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –õS c –æ–±—â–µ–π –æ—à–∏–±–∫–æ–π: {e_send_fallback_error_outer}"))
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞", show_alert=True)


@group_admin_router.callback_query(F.data.startswith(CANCEL_DELETE_CHAT_CALLBACK_PREFIX))
async def handle_cancel_delete_chat_callback(callback_query: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°)."""
    requesting_user_id = callback_query.from_user.id
    chat_id_from_callback = int(callback_query.data.split(":")[1]) # ID –≥—Ä—É–ø–ø—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ
    user_name = callback_query.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    group_chat_title_for_log = f"–ß–∞—Ç {chat_id_from_callback}" # Default
    try:
        group_chat_info = await bot.get_chat(chat_id_from_callback)
        if group_chat_info and group_chat_info.title:
            group_chat_title_for_log = group_chat_info.title
    except Exception as e_get_chat:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —á–∞—Ç–∞ {chat_id_from_callback} –¥–ª—è –ª–æ–≥–∞ –æ—Ç–º–µ–Ω—ã: {e_get_chat}")
        
    log_func = format_log_message if 'format_log_message' in globals() else lambda type, cid, ctitle, uid, uname, msg: f"[{type}] User {uid} ({uname}) in chat {cid} ('{ctitle}'): {msg}"

    logger.info(log_func("CALLBACK_CANCEL_DELETE", chat_id_from_callback, group_chat_title_for_log, requesting_user_id, user_name, f"–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id_from_callback}."))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∞—Å–µ–Ω–∏—è
    try:
        member = await bot.get_chat_member(chat_id_from_callback, requesting_user_id) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –¶–ï–õ–ï–í–û–ú —á–∞—Ç–µ
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await callback_query.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞.", show_alert=True)
            # –ù–µ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞–∂–∞—Ç—å –æ—Ç–º–µ–Ω—É –∏–º–µ–Ω–Ω–æ –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∞–≤
            return 
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å
        pass 
        
    await callback_query.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ \"{hbold(group_chat_title_for_log)}\" (ID: `{chat_id_from_callback}`) –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode="HTML")
    await callback_query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# --- –ö–û–ù–ï–¶ –ö–û–î–ê –î–õ–Ø /RMChat --- 