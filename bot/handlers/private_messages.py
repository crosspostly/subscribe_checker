import logging
from typing import Optional, List, Dict, Any, Tuple
import asyncio
import time

from aiogram import Router, F, types, Bot
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.markdown import hlink, hbold, hitalic, hcode, hpre
from aiogram.fsm.context import FSMContext # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext

from bot.db.database import DatabaseManager
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.data.callback_data import ManageSpecificChatCallback
from bot.utils.helpers import get_user_mention_html
from bot.bot_instance import bot, db_manager, actual_bot_username
from bot.middlewares.db_middleware import DbSessionMiddleware
from bot.middlewares.bot_middleware import BotMiddleware

from bot.states import Activation # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º StatesGroup Activation
from bot.services.channel_management import ChannelManagementService # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏

logger = logging.getLogger(__name__)
pm_router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
pm_router.message.middleware.register(DbSessionMiddleware(db_manager))
pm_router.callback_query.middleware.register(DbSessionMiddleware(db_manager))

pm_router.message.middleware.register(BotMiddleware(bot))
pm_router.callback_query.middleware.register(BotMiddleware(bot))

# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —Ä–æ—É—Ç–µ—Ä —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ
pm_router.message.filter(F.chat.type == ChatType.PRIVATE) 
pm_router.callback_query.filter(F.message.chat.type == ChatType.PRIVATE) # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤

# –•–µ–ª–ø–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä ID –∏–∑ payload
def extract_referrer_id(payload: Optional[str]) -> Optional[int]:
    if payload and payload.isdigit():
        try:
            ref_id = int(payload)
            # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: ID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            if 0 < ref_id < 2**31: # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è user_id
                return ref_id
        except (ValueError, TypeError):
            pass
    return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def _get_channel_title(bot: Bot, channel_id: int) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        chat = await bot.get_chat(channel_id)
        title = chat.title or f"ID: {channel_id}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–õ–ò –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        link = None
        if chat.username:
            link = f"https://t.me/{chat.username}"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ invite_link –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
        elif hasattr(chat, 'invite_link') and chat.invite_link:
             link = chat.invite_link # –°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        return hlink(title, link) if link else hbold(title)
    except TelegramAPIError as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º –∫—É—Ä—Å–∏–≤ –¥–ª—è –æ—à–∏–±–æ–∫
        return hitalic(f"–ö–∞–Ω–∞–ª ID {channel_id} (–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞)")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}", exc_info=True)
        return hitalic(f"–ö–∞–Ω–∞–ª ID {channel_id} (–æ—à–∏–±–∫–∞)")

async def _format_configured_chats(bot: Bot, db_manager: DatabaseManager, user_id: int) -> Tuple[str, Optional[types.InlineKeyboardMarkup]]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤.
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (text, keyboard)
    """
    configured_chats = await db_manager.get_chats_configured_by_user(user_id)
    builder = InlineKeyboardBuilder() # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    if not configured_chats:
        text = (
            f"–í—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.\n\n"
            f"‚û°Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è (@{actual_bot_username}) –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –∏ "
            f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        return text, None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    text_parts = ["\n‚ú® <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã:</b>\n"]
    for i, chat_info in enumerate(configured_chats):
        chat_id = chat_info.get('chat_id')
        # chat_title –∏–∑ –ë–î –∫–∞–∫ fallback
        chat_title_from_db = chat_info.get('chat_title') or f"–ß–∞—Ç {chat_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
        actual_title = chat_title_from_db # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –∫–∞–∫ fallback
        chat_display_name = hbold(actual_title) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –∂–∏—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        if chat_id: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chat_id, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_api_info = await bot.get_chat(chat_id) # bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å
                
                actual_title = chat_api_info.title or actual_title # –û–±–Ω–æ–≤–ª—è–µ–º title, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                chat_display_name = hbold(actual_title) # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                if chat_api_info.username:
                    chat_display_name = hlink(actual_title, f"https://t.me/{chat_api_info.username}")
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ):
                # elif hasattr(chat_api_info, 'invite_link') and chat_api_info.invite_link:
                #     chat_display_name = hlink(actual_title, chat_api_info.invite_link)
                # else: # –ï—Å–ª–∏ –Ω–µ username –∏ –Ω–µ invite_link, –ø—Ä–æ—Å—Ç–æ –∂–∏—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
                #     pass
            except TelegramAPIError as e_api:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞ {chat_id} ({actual_title}) –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e_api}")
                # –û—Å—Ç–∞–≤–ª—è–µ–º chat_display_name –∫–∞–∫ hbold(actual_title)
            except Exception as e_general: 
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} ({actual_title}): {e_general}", exc_info=True)
                # –û—Å—Ç–∞–≤–ª—è–µ–º chat_display_name –∫–∞–∫ hbold(actual_title)

        text_parts.append(f"\n{i+1}. üí¨ {chat_display_name}")

        channel_ids = chat_info.get('channels', [])
        if channel_ids:
            channel_tasks = [_get_channel_title(bot, ch_id) for ch_id in channel_ids]
            channel_titles = await asyncio.gather(*channel_tasks)
            channels_str = "\n".join([f"   ‚Ä¢ {title}" for title in channel_titles])
            text_parts.append(f"   ‚îî‚îÄ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{channels_str}")
        else:
            text_parts.append("   ‚îî‚îÄ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: (–Ω–µ—Ç)")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if chat_id: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID —á–∞—Ç–∞ –µ—Å—Ç—å
             builder.button(
                 text=f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å {actual_title[:25]}{'...' if len(actual_title) > 25 else ''}", # –ò—Å–ø–æ–ª—å–∑—É–µ–º actual_title
                 callback_data=ManageSpecificChatCallback(chat_id=chat_id).pack()
             )

    text_parts.append(
        f"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞."
    )
    
    builder.adjust(1) # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    keyboard = builder.as_markup() if configured_chats else None # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç—ã
    
    return "\n".join(text_parts), keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML-—Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
def get_chat_link_html(chat_id: int, chat_title: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç HTML-—Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç."""
    # –£–±–∏—Ä–∞–µ–º -100 –∏–∑ ID —á–∞—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏
    link_id = str(chat_id).replace('-100', '')
    return hlink(chat_title, f"https://t.me/c/{link_id}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@pm_router.message(Command("code"))
async def cmd_get_setup_code(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã."""
    user = message.from_user
    if not user:
        return # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –≤ –õ–°, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ,
    # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã user_id –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.
    setup_code = f"setup_{user.id}"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {setup_code}")

    text = (
        f"üîë –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã:\n\n"
        f"   {hcode(setup_code)}\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ "
        f"<b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –≤ —Ç—É –≥—Ä—É–ø–ø—É, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å "
        f"–ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã."
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode="HTML" –∏–∑ aiogram.enums.ParseMode –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
    await message.answer(text, parse_mode="HTML")

@pm_router.message(CommandStart(deep_link=True, deep_link_encoded=False))
@pm_router.message(CommandStart())
async def cmd_start_in_pm(message: types.Message, command: CommandObject, db_manager: DatabaseManager, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
    user = message.from_user
    if not user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ /start –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    start_payload = command.args
    referrer_id = extract_referrer_id(start_payload)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    actual_referrer_id = referrer_id if referrer_id and user.id != referrer_id else None

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or 'no_username'}) –∑–∞–ø—É—Å—Ç–∏–ª /start –≤ –õ–°. Payload: {start_payload}, Referrer ID: {actual_referrer_id}")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    existing_user_data = await db_manager.get_user(user.id)
    is_new_user = existing_user_data is None

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ú–µ—Ç–æ–¥ add_user_if_not_exists —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–∞ —Å–ª—É—á–∞—è (–Ω–æ–≤—ã–π/—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    await db_manager.add_user_if_not_exists(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        language_code=user.language_code,
        is_premium=bool(user.is_premium), # –ü—Ä–∏–≤–æ–¥–∏–º –∫ bool –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        referrer_id=actual_referrer_id if is_new_user else None # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–æ–≤—ã–π, –Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —É –Ω–µ–≥–æ –Ω–µ –±—ã–ª–æ, –∞ —Å–µ–π—á–∞—Å –ø—Ä–∏—à–µ–ª —Å –Ω–∏–º
    if not is_new_user and actual_referrer_id and existing_user_data and existing_user_data.get('referrer_id') is None:
         try:
             await db_manager.record_referral(referred_id=user.id, referrer_id=actual_referrer_id)
             logger.info(f"–ó–∞–ø–∏—Å–∞–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä {actual_referrer_id} –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
         except Exception as e: # –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ë–î
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {actual_referrer_id} –¥–ª—è {user.id}: {e}")

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    user_mention = hlink(user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", f"tg://user?id={user.id}")

    if is_new_user:
        text_parts = [
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_mention}!\n",
            f"–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.",
            f"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.\n",
            f"üìå <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>",
            f"1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è (@{actual_bot_username}) –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            f"2Ô∏è‚É£ –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).",
            f"3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            f"4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –≥—Ä—É–ø–ø—É.\n",
            f"‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å: /help"
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if actual_referrer_id:
             referrer_info = await db_manager.get_user(actual_referrer_id)
             ref_mention = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hitalic(str(actual_referrer_id))}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
             if referrer_info:
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–ª–∏ username, –µ—Å–ª–∏ –µ—Å—Ç—å
                 ref_name = referrer_info.get('first_name') or referrer_info.get('username')
                 if ref_name:
                      # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                     ref_mention = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hlink(ref_name, f'tg://user?id={actual_referrer_id}')}"
             text_parts.append(f"\nü§ù P.S. –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é {ref_mention}!")
        text = "\n".join(text_parts)

    else:
        # –û—Ç–≤–µ—Ç –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_back = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_mention}!"
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        chats_list_text, keyboard = await _format_configured_chats(bot, db_manager, user.id)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫
        text = f"{welcome_back}\n{chats_list_text}"
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        # text += f"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /code, /chats, /help"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞—è
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

@pm_router.message(Command("chats"))
async def cmd_mychats(message: types.Message, bot: Bot, db_manager: DatabaseManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user = message.from_user
    if not user:
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username or 'no_username'}) –∑–∞–ø—Ä–æ—Å–∏–ª /chats")
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text, keyboard = await _format_configured_chats(bot, db_manager, user.id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)

@pm_router.message(Command("help"))
async def show_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /help")
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    
    user_id = message.from_user.id
    user_setup_code = f"setup_{user_id}"
    bot_username_val = actual_bot_username if actual_bot_username else "—ç—Ç–æ–≥–æ –±–æ—Ç–∞"

    text = f"""‚ÑπÔ∏è {hbold(f"–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ (@{bot_username_val})")}


{hbold("–í –õ–∏—á–Ω—ã—Ö –°–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°):")}
  ‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
  ‚Ä¢ /code - –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.
  ‚Ä¢ /chats - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —á–∞—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.
  ‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.


{hbold("–í –ì—Ä—É–ø–ø–µ (–¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):")}
  ‚Ä¢ {hcode(user_setup_code)} - {hitalic("(–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ –∫–ª–∏–∫—É)")} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –±–æ—Ç—É.
  ‚Ä¢ {hcode("/channels")} - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –õ–°).
  ‚Ä¢ {hcode("/captcha")} - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–ø—á–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å).
  ‚Ä¢ {hcode("/subcheck")} - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å).
  ‚Ä¢ {hcode("/rmchat")} - {hitalic("(–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã)")} –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –±–æ—Ç–∞. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.


{hbold("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:")}
  ‚úì –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–∞–ø—á–∞, –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ.
  ‚úì –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤), –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è. –ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —É–¥–∞–ª–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É—Ç.


‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ {hcode("@daoqub")}
"""
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∑–∞–¥–∞–Ω–Ω—ã–µ –≤ f-string
    lines = text.strip().splitlines()
    cleaned_lines = [line.lstrip() for line in lines]
    cleaned_text = "\n".join(cleaned_lines)

    try:
        await message.answer(cleaned_text, parse_mode="HTML", disable_web_page_preview=True)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ /help —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}", exc_info=True)

@pm_router.message(Command("test_html"))
async def cmd_test_html(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /test_html")
    test_text = f"–≠—Ç–æ {hbold('–∂–∏—Ä–Ω—ã–π')} —Ç–µ–∫—Å—Ç, —ç—Ç–æ {hcode('–∫–æ–¥')}, –∞ —ç—Ç–æ {hitalic('–∫—É—Ä—Å–∏–≤')}."
    try:
        await message.answer(test_text, parse_mode="HTML")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ /test_html —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /test_html –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}", exc_info=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è Activation.awaiting_code (–≤ –õ–°) ---

@pm_router.message(Activation.awaiting_code, F.chat.type == ChatType.PRIVATE)
async def process_activation_code(message: types.Message, state: FSMContext, db_manager: DatabaseManager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
    user = message.from_user
    if not user or not message.text:
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    activation_code = message.text.strip()
    user_id = user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()
    target_chat_id = data.get('target_chat_id')
    target_chat_title = data.get('target_chat_title')

    if not target_chat_id or not target_chat_title:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ awaiting_code –±–µ–∑ target_chat_id/title –≤ FSM.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_code} –¥–ª—è —á–∞—Ç–∞ {target_chat_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if db_manager.is_valid_activation_code(activation_code):
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!
        try:
            # –û—Ç–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –ë–î
            await db_manager.mark_chat_activated(target_chat_id, user_id)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()

            # –ó–∞–ø—É—Å–∫–∞–µ–º FSM —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ChannelManagementService –æ–∂–∏–¥–∞–µ—Ç chat_id –∏ user_id
            await ChannelManagementService.start_channel_management(user_id, target_chat_id, state) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–∏ args

            success_text = (\
                f"üéâ –ß–∞—Ç \"{target_chat_title}\" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\\n\\n"\
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\\n"\
                f"–ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞."\
            )
            await message.answer(success_text)
            logger.info(f"–ß–∞—Ç {target_chat_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—á–∞—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            await db_manager.update_last_activation_request_ts(target_chat_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ {target_chat_id} –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ ChannelManagementService –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (@daoqub).")
            # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–ª–∏ –æ—á–∏—â–∞–µ–º? –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.
            # await state.clear()

    else:
        # –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
        error_text = (\
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\\n\\n"\
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\\n"\
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (@daoqub) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."\
        )
        await message.answer(error_text)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {target_chat_id}: {activation_code}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ awaiting_code

# --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Activation.awaiting_code ---

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pm_router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ –±–æ—Ç–∞ (__main__.py)
# dp.include_router(pm_router)
