import logging
import json
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.enums import ChatType
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db.database import DatabaseManager
# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from bot.services.channel_mgmt import ChannelManagementService
from bot.bot_instance import bot, db_manager
from bot.middlewares.db_middleware import DbSessionMiddleware
from bot.middlewares.bot_middleware import BotMiddleware
from bot.utils.helpers import is_admin
from typing import Optional 

logger = logging.getLogger(__name__)
admin_router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
admin_router.message.middleware.register(DbSessionMiddleware(db_manager))
admin_router.callback_query.middleware.register(DbSessionMiddleware(db_manager))

admin_router.message.middleware.register(BotMiddleware(bot))
admin_router.callback_query.middleware.register(BotMiddleware(bot))

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
admin_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))

# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ ---
async def check_admin_permissions(message: types.Message, bot: Bot) -> bool:
    if not await is_admin(bot, message.chat.id, message.from_user.id):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ ---

# --- –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

@admin_router.message(Command("captcha"))
async def toggle_captcha_command(message: types.Message, bot: Bot, db_manager: DatabaseManager):
    if not await check_admin_permissions(message, bot):
        return

    chat_id = message.chat.id
    new_state = await db_manager.toggle_setting(chat_id, 'captcha_enabled')
    if new_state is not None:
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await message.reply(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ø–µ—Ä—å {status}.")
    else:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

@admin_router.message(Command("subcheck"))
async def toggle_sub_check_command(message: types.Message, bot: Bot, db_manager: DatabaseManager):
    if not await check_admin_permissions(message, bot):
        return

    chat_id = message.chat.id
    new_state = await db_manager.toggle_setting(chat_id, 'subscription_check_enabled')
    if new_state is not None:
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await message.reply(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã —Ç–µ–ø–µ—Ä—å {status}.")
    else:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º ---
from aiogram.fsm.context import FSMContext
from bot.states import OwnerGrantAccessStates # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from bot.data.callback_data import OwnerGrantAccessCallback, OwnerActivationChoiceCallback, DirectAdminSetupCallback # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CallbackData
from bot.config import BOT_OWNER_ID # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∞–¥–µ–ª–µ—Ü
import time

# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ –∏ –≤ –õ–°
# owner_only_private_filter = (F.chat.type == ChatType.PRIVATE) & (F.from_user.id == BOT_OWNER_ID) # –°—Ç–∞—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä

# –ù–æ–≤–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è CallbackQuery
async def owner_only_private_filter_debug_cq(query: types.CallbackQuery) -> bool:
    user_id = query.from_user.id
    
    if not query.message or not query.message.chat:
        logger.warning(f"[CQ_FILTER_DEBUG] CallbackQuery {query.id} –Ω–µ –∏–º–µ–µ—Ç message –∏–ª–∏ message.chat –æ–±—ä–µ–∫—Ç–∞.")
        return False
    chat_type_val = query.message.chat.type
    
    logger.info(f"[CQ_FILTER_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è User ID: {user_id}, Chat Type: {chat_type_val}")
    
    is_private = chat_type_val == ChatType.PRIVATE
    try:
        # BOT_OWNER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int. pydantic-settings –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.
        bot_owner_id_int = int(BOT_OWNER_ID)
    except ValueError:
        logger.error(f"[CQ_FILTER_DEBUG] BOT_OWNER_ID ('{BOT_OWNER_ID}') –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º integer!")
        return False
        
    is_owner = user_id == bot_owner_id_int
    
    result = is_private and is_owner
    
    logger.info(f"[CQ_FILTER_DEBUG] –ß–∞—Ç —è–≤–ª—è–µ—Ç—Å—è PRIVATE: {is_private}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è OWNER ({user_id} == {bot_owner_id_int}): {is_owner}. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞: {result}")
    return result

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –õ–° (–ù–û–í–´–ô)
async def owner_only_private_message_filter(message: types.Message) -> bool:
    if BOT_OWNER_ID is None:
        logger.warning("[OWNER_MSG_FILTER] BOT_OWNER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç.")
        return False
    try:
        # BOT_OWNER_ID –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–∑ .env, –µ—Å–ª–∏ pydantic –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª –µ–≥–æ –≤ int
        # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –≥–¥–µ-—Ç–æ.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º int —Å int.
        bot_owner_id_int = int(BOT_OWNER_ID) 
    except (ValueError, TypeError):
        logger.error(f"[OWNER_MSG_FILTER] BOT_OWNER_ID ('{BOT_OWNER_ID}') –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º integer!")
        return False
    
    is_private = message.chat.type == ChatType.PRIVATE
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ message.from_user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not message.from_user:
        logger.warning("[OWNER_MSG_FILTER] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ message.from_user.")
        return False
        
    is_owner = message.from_user.id == bot_owner_id_int
    result = is_private and is_owner
    logger.debug(f"[OWNER_MSG_FILTER] User ID: {message.from_user.id}, Chat Type: {message.chat.type}. Is Private: {is_private}, Is Owner: {is_owner}. Result: {result}")
    return result

@admin_router.callback_query(OwnerGrantAccessCallback.filter(F.action == "grant"), owner_only_private_filter_debug_cq) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
async def handle_owner_grant_access_action(query: types.CallbackQuery, callback_data: OwnerGrantAccessCallback, state: FSMContext, bot: Bot):
    logger.info(f"[OWNER_GRANT_ACTION_DEBUG_FILTER] CB –æ—Ç {query.from_user.id}, chat_type: {query.message.chat.type}, action: {callback_data.action}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.")
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ handle_owner_grant_access_action –∫–∞–∫ –±—ã–ª)
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ - —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    user_to_grant_id = callback_data.user_id
    chat_id_for_grant = callback_data.chat_id

    await state.update_data(grant_access_user_id=user_to_grant_id, grant_access_chat_id=chat_id_for_grant)
    await state.set_state(OwnerGrantAccessStates.awaiting_days_input)

    try:
        user_info = await bot.get_chat(user_to_grant_id) 
        chat_info = await bot.get_chat(chat_id_for_grant) 
        user_display_name = user_info.full_name or f"ID {user_to_grant_id}"
        chat_display_name = chat_info.title or f"ID {chat_id_for_grant}"
    except Exception:
        user_display_name = f"ID {user_to_grant_id}"
        chat_display_name = f"ID {chat_id_for_grant}"

    text = (
        f"üîë –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_display_name}</b> –≤ —á–∞—Ç–µ <b>{chat_display_name}</b>.\\n\\n"
        f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 30, 0 - –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ)."
    )
    await query.message.edit_text(text, parse_mode="HTML")
    # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω

@admin_router.callback_query(OwnerGrantAccessCallback.filter(F.action == "cancel_grant"), owner_only_private_filter_debug_cq) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
async def handle_owner_cancel_grant_action(query: types.CallbackQuery, callback_data: OwnerGrantAccessCallback, state: FSMContext, bot: Bot):
    logger.info(f"[OWNER_CANCEL_GRANT_DEBUG_FILTER] CB –æ—Ç {query.from_user.id}, chat_type: {query.message.chat.type}, action: {callback_data.action}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.")
    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ") # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ handle_owner_cancel_grant_action –∫–∞–∫ –±—ã–ª)
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ - —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    try:
        user_info = await bot.get_chat(callback_data.user_id)
        chat_info = await bot.get_chat(callback_data.chat_id)
        user_display_name = user_info.full_name or f"ID {callback_data.user_id}"
        chat_display_name = chat_info.title or f"ID {callback_data.chat_id}"
    except Exception:
        user_display_name = f"ID {callback_data.user_id}"
        chat_display_name = f"ID {callback_data.chat_id}"

    text = (
        f"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_display_name}</b> "
        f"–≤ —á–∞—Ç–µ <b>{chat_display_name}</b> –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=None) 
    await state.clear()
    # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω

@admin_router.message(OwnerGrantAccessStates.awaiting_days_input, owner_only_private_message_filter, F.text) # –ü–†–ò–ú–ï–ù–Ø–ï–ú –ù–û–í–´–ô –§–ò–õ–¨–¢–†
async def handle_owner_days_input(message: types.Message, state: FSMContext, db_manager: DatabaseManager, bot: Bot):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ –Ω–µ –∫–æ–ª–ª–±—ç–∫–æ–≤, –Ω–æ —Ñ–∏–ª—å—Ç—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫ –Ω–µ–º—É —Ç–æ–∂–µ –ø—Ä–∏–º–µ–Ω–∏–º.
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä owner_only_private_filter_debug_cq –Ω–∞–ø–∏—Å–∞–Ω –¥–ª—è CallbackQuery.
    # –ù—É–∂–Ω–æ –ª–∏–±–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–ª—è Message, –ª–∏–±–æ –ø–æ–∫–∞ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä —Å—é–¥–∞.
    # –î–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ –±—ã–ª, —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º (–µ—Å–ª–∏ –æ–Ω –±—ã–ª) –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫.
    # –í –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –º—ã –Ω–µ —Ç—Ä–æ–≥–∞–ª–∏ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–∞–∫ —á—Ç–æ –≤–µ—Ä–Ω–µ–º –µ–≥–æ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å owner_only_private_filter
    # –ü–†–ê–í–ö–ê: –í–æ–∑–≤—Ä–∞—â–∞—é owner_only_private_filter –¥–ª—è —ç—Ç–æ–≥–æ message handler, —Ç–∞–∫ –∫–∞–∫ owner_only_private_filter_debug_cq –¥–ª—è CallbackQuery
    # logger.info(f"[OWNER_DAYS_INPUT_DEBUG_FILTER] Message –æ—Ç {message.from_user.id}, chat_type: {message.chat.type}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.") # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ –µ—Å–ª–∏ –±—ã —Ñ–∏–ª—å—Ç—Ä –±—ã–ª –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω
    logger.debug(f"[OWNER_DAYS_INPUT] –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–Ω–µ–π. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.") # –î–æ–±–∞–≤–∏–º –ª–æ–≥, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω
    
    # –ö–æ–¥ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª –≤ —Ñ–∞–π–ª–µ, —Å –µ–≥–æ –æ–±—ã—á–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º.
    # –ú—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ CallbackQuery —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö –¥–ª—è –∫–Ω–æ–ø–æ–∫.
# --- –ù–∞—á–∞–ª–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ handle_owner_days_input ---
    state_data = await state.get_data()
    user_id = state_data.get("grant_access_user_id")
    chat_id = state_data.get("grant_access_chat_id")

    if not user_id or not chat_id:
        logger.error(f"[OWNER_GRANT] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç user_id –∏–ª–∏ chat_id –≤ state –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–Ω–µ–π. User: {message.from_user.id}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    try:
        days = int(message.text.strip())
        if days < 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 30, –∏–ª–∏ 0 –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞).")
        return 

    access_until_ts: Optional[int] = None # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ Optional –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (from typing import Optional)
    if days > 0:
        access_until_ts = int(time.time()) + days * 24 * 60 * 60

    try:
        await db_manager.update_user_granted_access(user_id, chat_id, access_until_ts)
        
        user_info = await bot.get_chat(user_id)
        chat_info = await bot.get_chat(chat_id)
        user_display_name = user_info.full_name or f"ID {user_id}"
        chat_display_name = chat_info.title or f"ID {chat_id}"

        if access_until_ts:
            from datetime import datetime
            access_end_date_str = datetime.fromtimestamp(access_until_ts).strftime('%d.%m.%Y %H:%M:%S')
            response_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_display_name}</b> –≤ —á–∞—Ç–µ <b>{chat_display_name}</b> "
                f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ <b>{days}</b> –¥–Ω–µ–π (–¥–æ {access_end_date_str})."
            )
        else: 
            response_text = (
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{user_display_name}</b> –≤ —á–∞—Ç–µ <b>{chat_display_name}</b> "
                f"–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω <b>–±–µ—Å—Å—Ä–æ—á–Ω—ã–π</b> –æ—Å–æ–±—ã–π –¥–æ—Å—Ç—É–ø."
            )
        
        await message.reply(response_text, parse_mode="HTML")
        await state.clear()

        try:
            user_notification_text = f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Å–æ–±—ã–π –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç–µ ¬´{chat_display_name}¬ª "
            if access_until_ts:
                from datetime import datetime # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                user_notification_text += f"–¥–æ {datetime.fromtimestamp(access_until_ts).strftime('%d.%m.%Y')}."
            else:
                user_notification_text += "(–±–µ—Å—Å—Ä–æ—á–Ω–æ)."
            await bot.send_message(user_id, user_notification_text)
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ: {e_notify}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è user {user_id} –≤ chat {chat_id}: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        await state.clear() 
# --- –ö–æ–Ω–µ—Ü –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ handle_owner_days_input ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ ---

@admin_router.callback_query(OwnerActivationChoiceCallback.filter(F.action == "approve"), owner_only_private_filter_debug_cq) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
async def handle_owner_approve_activation(query: types.CallbackQuery, callback_data: OwnerActivationChoiceCallback, bot: Bot, db_manager: DatabaseManager, state: FSMContext):
    logger.info(f"[OWNER_APPROVE_DEBUG_FILTER] CB –æ—Ç {query.from_user.id}, chat_type: {query.message.chat.type}, action: {callback_data.action}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.")
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤–∏—Å–µ–ª–∞
    
    logger.info(f"[OWNER_APPROVE_LOGIC] –í–ª–∞–¥–µ–ª–µ—Ü ({query.from_user.id}) –æ–¥–æ–±—Ä–∏–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–∞—Ç–∞ {callback_data.target_chat_id}, –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω–æ–º {callback_data.target_user_id}.")
    chat_id_to_activate = callback_data.target_chat_id
    admin_id_who_requested = callback_data.target_user_id # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    owner_id = query.from_user.id

    try:
        await db_manager.activate_chat_for_owner(chat_id_to_activate, owner_id)
        logger.info(f"[OWNER_APPROVE_LOGIC] –í—ã–∑–≤–∞–Ω activate_chat_for_owner –¥–ª—è —á–∞—Ç–∞ {chat_id_to_activate} –≤–ª–∞–¥–µ–ª—å—Ü–µ–º {owner_id}.")
    except Exception as e:
        logger.error(f"[OWNER_APPROVE_LOGIC] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç {chat_id_to_activate}: {e}")
        try:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.", reply_markup=None)
        except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        return

    chat_title_display = f"ID {chat_id_to_activate}"
    admin_mention_html = f"<a href='tg://user?id={admin_id_who_requested}'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID {admin_id_who_requested})</a>"
    try:
        chat_info = await bot.get_chat(chat_id_to_activate)
        chat_title_display = chat_info.title or chat_title_display
        
        admin_user_info = await bot.get_chat(admin_id_who_requested) # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ–± –∞–¥–º–∏–Ω–µ –¥–ª—è –µ–≥–æ –∏–º–µ–Ω–∏
        admin_name_display = admin_user_info.full_name or f"ID {admin_id_who_requested}"
        admin_mention_html = f"<a href='tg://user?id={admin_id_who_requested}'>{admin_name_display}</a>"

    except Exception as e_get_info:
        logger.warning(f"[OWNER_APPROVE_LOGIC] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–∞–¥–º–∏–Ω–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e_get_info}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        admin_message_text = (
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞ ¬´<b>{chat_title_display}</b>¬ª –æ–¥–æ–±—Ä–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º! –ß–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\\n\\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        
        setup_button_builder = InlineKeyboardBuilder()
        setup_button_builder.button(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã",
            callback_data=DirectAdminSetupCallback(chat_id=chat_id_to_activate, admin_id=admin_id_who_requested)
        )
        
        await bot.send_message(
            admin_id_who_requested,
            admin_message_text,
            parse_mode="HTML",
            reply_markup=setup_button_builder.as_markup()
        )
        logger.info(f"[OWNER_APPROVE_LOGIC] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id_who_requested} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id_to_activate}.")
    except Exception as e_admin_notify:
        logger.error(f"[OWNER_APPROVE_LOGIC] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id_who_requested} –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id_to_activate}: {e_admin_notify}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    owner_confirm_text = (
        f"‚úÖ –ß–∞—Ç ¬´<b>{chat_title_display}</b>¬ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\\n\\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {admin_mention_html}."
    )
    try:
        await query.message.edit_text(owner_confirm_text, parse_mode="HTML", reply_markup=None)
    except Exception as e_owner_confirm:
        logger.warning(f"[OWNER_APPROVE_LOGIC] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e_owner_confirm}")

    # FSM –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–¥–µ—Å—å
    # channel_service = ChannelManagementService(bot=bot, db_manager=db_manager, storage=state.storage)
    # await state.update_data(...)
    # await channel_service.start_channel_management(...)
    logger.info(f"[OWNER_APPROVE_LOGIC] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º. –ß–∞—Ç {chat_id_to_activate} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∞–¥–º–∏–Ω {admin_id_who_requested} —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ

@admin_router.callback_query(OwnerActivationChoiceCallback.filter(F.action == "approve_grant"), owner_only_private_filter_debug_cq) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
async def handle_owner_approve_and_grant(query: types.CallbackQuery, callback_data: OwnerActivationChoiceCallback, bot: Bot, db_manager: DatabaseManager, state: FSMContext):
    logger.info(f"[OWNER_APPROVE_GRANT_DEBUG_FILTER] CB –æ—Ç {query.from_user.id}, chat_type: {query.message.chat.type}, action: {callback_data.action}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.")
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê ---
    chat_id_to_activate = callback_data.target_chat_id 
    owner_id = query.from_user.id
    target_user_id = callback_data.target_user_id
    target_chat_id_val = callback_data.target_chat_id 
    logger.info(f"[OWNER_APPROVE_GRANT_LOGIC] –í–ª–∞–¥–µ–ª–µ—Ü {owner_id} –æ–¥–æ–±—Ä–∏–ª —Å –≤—ã–¥–∞—á–µ–π –¥–æ—Å—Ç—É–ø–∞ (approve_grant) –∑–∞–ø—Ä–æ—Å –æ—Ç {target_user_id} –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}.")
    try:
        await db_manager.activate_chat_for_owner(target_chat_id_val, query.from_user.id)
        logger.info(f"[OWNER_APPROVE_GRANT_LOGIC] –í—ã–∑–≤–∞–Ω activate_chat_for_owner –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val} –≤–ª–∞–¥–µ–ª—å—Ü–µ–º {query.from_user.id} –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –¥–æ—Å—Ç—É–ø–∞.")
        chat_info = await bot.get_chat(target_chat_id_val)
        admin_info = await bot.get_chat(target_user_id)
        chat_title_display = chat_info.title or f"ID {target_chat_id_val}"
        admin_full_name = admin_info.full_name or f"User {target_user_id}"
        admin_mention_html = f"<a href='tg://user?id={target_user_id}'>{admin_full_name}</a>"
        admin_notification_text = f"‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ß–∞—Ç <b>{chat_title_display}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–í–∞–º —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Å–æ–±—ã–π –¥–æ—Å—Ç—É–ø."
        try:
            await bot.send_message(target_user_id, admin_notification_text, parse_mode="HTML")
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {target_user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ (approve_grant) —á–∞—Ç–∞ {target_chat_id_val}: {e_notify}")
        await state.update_data(grant_access_user_id=target_user_id, grant_access_chat_id=target_chat_id_val)
        await state.set_state(OwnerGrantAccessStates.awaiting_days_input)
        owner_message_text = (
            f"‚úÖ –ß–∞—Ç <b>{chat_title_display}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {admin_mention_html}.\n\n"
            f"üîë –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É –æ—Å–æ–±—ã–π –¥–æ—Å—Ç—É–ø? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 - –±–µ—Å—Å—Ä–æ—á–Ω–æ)."
        )
        await query.message.edit_text(owner_message_text, parse_mode="HTML", reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å –≤—ã–¥–∞—á–µ–π –¥–æ—Å—Ç—É–ø–∞ (approve_grant) –≤–ª–∞–¥–µ–ª—å—Ü–µ–º {owner_id} –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}: {e}", exc_info=True)
        try:
            await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.", reply_markup=None)
        except Exception: pass 
        await state.clear()

@admin_router.callback_query(OwnerActivationChoiceCallback.filter(F.action == "reject"), owner_only_private_filter_debug_cq) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
async def handle_owner_reject_activation(query: types.CallbackQuery, callback_data: OwnerActivationChoiceCallback, bot: Bot, db_manager: DatabaseManager, state: FSMContext):
    logger.info(f"[OWNER_REJECT_DEBUG_FILTER] CB –æ—Ç {query.from_user.id}, chat_type: {query.message.chat.type}, action: {callback_data.action}. –§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω.")
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    
    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê ---
    owner_id = query.from_user.id
    target_user_id = callback_data.target_user_id
    target_chat_id_val = callback_data.target_chat_id
    logger.info(f"[OWNER_REJECT_LOGIC] –í–ª–∞–¥–µ–ª–µ—Ü {owner_id} –æ—Ç–∫–ª–æ–Ω–∏–ª (reject) –∑–∞–ø—Ä–æ—Å –æ—Ç {target_user_id} –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}.")
    try:
        chat_info = await bot.get_chat(target_chat_id_val)
        admin_info = await bot.get_chat(target_user_id)
        chat_title_display = chat_info.title or f"ID {target_chat_id_val}"
        admin_full_name = admin_info.full_name or f"User {target_user_id}"
        admin_mention_html = f"<a href='tg://user?id={target_user_id}'>{admin_full_name}</a>"
        admin_notification_text = f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–∞—Ç–∞ <b>{chat_title_display}</b>."
        try:
            await bot.send_message(target_user_id, admin_notification_text, parse_mode="HTML")
        except Exception as e_notify:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {target_user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}: {e_notify}")
        owner_message_text = (
            f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç {admin_mention_html} –¥–ª—è —á–∞—Ç–∞ <b>{chat_title_display}</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
        await query.message.edit_text(owner_message_text, parse_mode="HTML", reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message_text = (
        f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —á–∞—Ç–∞ <b>{chat_title_display}</b>.\n\n"
        f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @daoqub."
    ) 
    try:
        await bot.send_message(target_user_id, admin_message_text, parse_mode="HTML")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {target_user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}.")
    except Exception as e_notify:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {target_user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id_val}: {e_notify}")

    await state.clear() 